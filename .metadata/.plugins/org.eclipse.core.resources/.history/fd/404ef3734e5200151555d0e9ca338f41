/*
 *
 *  Created on: Sep 3, 2015
 *      Author: Deepak K. Gupta
 *  
 */

#include <atop/fem/define_mesh.h>
#include <atop/physics/mechanics/elastic.h>
#include <atop/TopologyOptimization/penalization.h>
#include <atop/TopologyOptimization/projection.h>
#include <atop/TopologyOptimization/optimizedesign.h>
#include <atop/fem/fem.h>
#include <string>
#include <vector>
#include <math.h>

using namespace atop;

std::vector<double> source_function(std::vector<double> X){
	//This function returns the value of the source function in the whole domain

	double load = 100;
	std::vector<double> output_source(2, 0.0);
	double rd = 0.025;

	if (fabs(X[0] - 0) < rd){
		load = load * -1;
		output_source[1] = load;
	}
	else if (fabs(X[0] - 1) < rd){
		output_source[1] = load;
	}
	else if (fabs(X[1] - 0) < rd){
		load = load * -1;
		output_source[0] = load;
	}
	else if (fabs(X[1] - 1) < rd){
		output_source[0] = load;
	}
	return output_source;
}

unsigned int get_boundary_indicator(std::vector<double> X){
	//This function defines the boundary indicators

	if (sqrt(pow(X[0] - 0.5, 2) + pow(X[1] - 0.5, 2)) < 0.027)
		return 42;
	else
		return 0;

}

int main(){
	using namespace atop;

	//Define the mesh
	DefineMesh<2> mesh(2);
	mesh.coordinates = {{0, 1}, {0, 1}};
	mesh.subdivisions = {41, 41};
	mesh.density_subdivisions = {41, 41};
	mesh.coupling = true;
	mesh.source_fn = source_function;
	mesh.boundary_indicator = get_boundary_indicator;
	mesh.meshType = "subdivided_hyper_rectangle";
	mesh.elementType = "FE_Q";
	mesh.density_elementType = "FE_DGQ";
	mesh.el_order = 1;
	mesh.density_el_order = 1;
	mesh.adaptivityType = "adaptive_grayness";

	//Define the FE related parameters

	//Define the physics of the problem
	LinearElastic<2> material1;
	material1.E = 1.0;
	material1.poisson = 0.3;
	material1.planarType = "planar_stress";

	//Define the penalization scheme
	Penalize penal("SIMP");
	penal.factmin = 1e-9;
	penal.penal_power = 3.0;

	//Define the projection scheme
	Projection filter("density_filter",
			0.03, 0.51);

	//Define the optimization parameters
	Optimizedesign<2> opt(mesh, penal, filter, "MMA", 5);
	opt.problem_name = "minimum_compliance";
	opt.problemType(material1);
	opt.volfrac = 0.45; //Maximum permissible volume fraction
	opt.optimize();
	std::cout<<"SUCCESS ATTAINED"<<std::endl;
}
