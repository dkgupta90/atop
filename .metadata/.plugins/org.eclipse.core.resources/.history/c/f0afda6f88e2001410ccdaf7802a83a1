/*
 * step1.cpp
 *
 *  Created on: Jun 20, 2014 at Precision & Microsystems Engineering group, TU Delft
 *      Author: Deepak K. Gupta
 */


#include <deal.II/base/quadrature_lib.h>
#include <deal.II/base/function.h>
#include <deal.II/base/logstream.h>
#include <deal.II/lac/vector.h>
#include <deal.II/lac/full_matrix.h>
#include <deal.II/lac/sparse_matrix.h>
#include <deal.II/lac/solver_cg.h>
#include <deal.II/lac/precondition.h>
#include <deal.II/lac/constraint_matrix.h>
#include <deal.II/grid/tria.h>
#include <deal.II/grid/grid_generator.h>
#include <deal.II/grid/grid_refinement.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/grid/tria_iterator.h>
#include <deal.II/grid/tria_boundary_lib.h>
#include <deal.II/grid/grid_tools.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_accessor.h>
#include <deal.II/dofs/dof_tools.h>
#include <deal.II/fe/fe_values.h>
#include <deal.II/numerics/vector_tools.h>
#include <deal.II/numerics/matrix_tools.h>
#include <deal.II/numerics/data_out.h>
#include <deal.II/numerics/error_estimator.h>
#include <deal.II/fe/fe_system.h>
#include <deal.II/fe/fe_q.h>
#include <deal.II/fe/fe_dgq.h>
#include <fstream>
#include <iostream>
#include <sstream>
#include <atop/TopologyOptimization/DensityValues.h>
#include <atop/TopologyOptimization/penalization.h>
#include <atop/physics/elasticity.h>
#include <atop/data_format/bitmap/bitmap_image.hpp>
#include <atop/data_format/bitmap.h>
#include <atop/math_tools/algebra/MatrixVector.h>
#include <atop/TopologyOptimization/design_analysis.h>
#include<deal.II/grid/grid_refinement.h>
#include<deal.II/numerics/error_estimator.h>
#include <deal.II/numerics/data_out_dof_data.h>
#include <atop/TopologyOptimization/RefinementIndicator.h>
#include <time.h>
#include <math.h>
#include <atop/TopologyOptimization/cell_prop.h>
//#include <nlopt.hpp>
#include <iostream>
#include <fstream>
#include <stddef.h>

namespace Step1 {
	using namespace dealii;
	using namespace topopt;
	template <int dim>

	class TopOptimization {
	public:
		double xmin, xmax, ymin, ymax;	//Limits for the rectangular domain
		unsigned int x_count, y_count;	//analysis mesh size
		unsigned int design_x_count, design_y_count;	//design mesh size
		double E0, Emin, nu;	//Elasticity parameters
		double penal_power;		//SIMP penal power
		unsigned int penalization_model;
		unsigned int no_iterations, itr_count, cycle, no_cycles;
		unsigned int cycle_change;
		std::vector<double> density_mesh;
		std::vector<double> old_density_mesh;
		std::ofstream myfile;

		double objective;	//compliance objective
		double volfrac;
		double projection_radius;
		std::vector<double> dobj_ddn;
		double f0fac;	//MMA parameter
		std::vector<Design_Analysis> des_analysis;
		std::vector<double> x;
		std::vector< StoreIndices> elem_neighbors;
		double max_cell_area;
		double max_projection_radius;
		double max_density_JxW;
		double min_projection_radius, gamma;
		double old_objective;
		unsigned int model_problem;
		unsigned int max_quadrature_rule;
		unsigned int running_quad_rule, current_quad_rule;
		unsigned int max_levels;

		TopOptimization();
		~TopOptimization();

		void run();

	private:
		void fem_solver(int itr);
		void calculate_sensitivities();
		void setup_system();
		void assemble_system();
		void update_density_mesh();
		void boundary_info();
		void solve();
		void filter();
		void refine_grid();
		void optimize_OC();
		void update_cellprop();
		double get_penal_power(double penal_power,
				unsigned int,
				unsigned int,
				unsigned int,
				unsigned int);


		typedef struct{
			double a;
			unsigned int elem_count;
		}my_constraint_data;

		void output_results(const unsigned int cycle) const;
		Triangulation<dim> triangulation;	//Defines dim dimensional triangulation object
		Triangulation<dim> density_triangulation; //For visualization of denity distribution
		DoFHandler<dim> dof_handler;
		FESystem<dim> fe;
		DoFHandler<dim> density_dof_handler;
		FESystem<dim> density_fe;
		ConstraintMatrix hanging_node_constraints;
		ConstraintMatrix density_hanging_node_constraints;
		SparsityPattern sparsity_pattern;
		SparseMatrix<double> system_matrix;
		Vector<double> solution;
		Vector<double> system_rhs;
		Vector<double> nodal_density;
		std::vector<FullMatrix<double>> elem_stiffness_array;
		DensityValues rho_values;
		StoreElasticData elastic_data;
		std::vector<CellProperties> cellprop;
	};


	template <int dim>
	class RightHandSide: public Function<dim>{
	public:
		RightHandSide();
		virtual void vector_value(const Point<dim> &p,
				Vector<double> &values) const;
		virtual void vector_value_list(const std::vector<Point<dim>> &points,
				std::vector<Vector<double>> &value_list) const;
	};

	template <int dim>
	class BoundaryValues : public Function<dim>{
	public:
		BoundaryValues(): Function<dim>() {}
		virtual void vector_value(const Point<dim> &p,
				Vector<double> &values) const;
		virtual void vector_value_list (const std::vector<Point<dim>> & points,
				std::vector<Vector<double>> &value_list) const;
	};

	template <int dim>
	RightHandSide<dim>::RightHandSide() : Function<dim>(dim){}; //constructor for the base class

	template <int dim>
	inline
	void RightHandSide<dim>::vector_value(const Point<dim> &p,
			Vector<double> &values) const{
		Assert (values.size() == dim,
				ExcDimensionMismatch(values.size(), dim));
		Assert(dim >= 2,
				ExcNotImplemented());
	}

	template <int dim>
	void RightHandSide<dim>::vector_value_list(const std::vector<Point<dim>> &points,
			std::vector<Vector<double>> &value_list) const {
		Assert (value_list.size() == points.size(),
				ExcDimensionMismatch(value_list.size(), points.size()));
		const unsigned int n_points = points.size();

		for (unsigned int p = 0; p < n_points; ++p){
			RightHandSide<dim>::vector_value(points[p],
					value_list[p]);
		}
	}

	template <int dim>
	inline
	void BoundaryValues<dim>::vector_value(const Point<dim> &p,
			Vector<double> &values) const{
		Assert (values.size() == dim,
				ExcDimensionMismatch(values.size(), dim));
		Assert(dim >= 2,
				ExcNotImplemented());
		unsigned int model_problem = 2;
		double xmin, xmax, ymin, ymax;
		if (model_problem == 1){
			//MBB problem
			xmin = 0, ymin = 0, xmax = 2, ymax = 1;
			if (std::fabs(p(0) - (xmin)) < 1e-12){
				values(0) = 0;
				values(1) = 0;
			}
		}
		else if (model_problem == 2) {
			//Mitchel stress problem
			xmin = 0, ymin = 0, xmax = 1.5, ymax = 1;
			double rball = 0.02;
			Point<dim> center;
			center(0) = xmin + rball;
			center(1) = (ymax+ymin)/2;
			if (center.distance(p) <= rball){
				values(0) = 0;
				values(1) = 0;
			}
		}


	}

	template <int dim>
	void BoundaryValues<dim>::vector_value_list(const std::vector<Point<dim>> &points,
			std::vector<Vector<double>> &value_list) const {
		Assert (value_list.size() == points.size(),
				ExcDimensionMismatch(value_list.size(), points.size()));
		const unsigned int n_points = points.size();

		for (unsigned int p = 0; p < n_points; ++p){
			BoundaryValues<dim>::vector_value(points[p],
					value_list[p]);
		}
	}


	template <int dim>
	TopOptimization<dim>::TopOptimization():
		dof_handler(triangulation),
		fe(FE_Q<dim>(1), dim),
		density_dof_handler(density_triangulation),
		density_fe(FE_DGQ<dim>(1), 1)
		{}

	template <int dim>
	TopOptimization<dim>::~TopOptimization(){
		dof_handler.clear();
		density_dof_handler.clear();
	}

	template <int dim>
	void TopOptimization<dim>::setup_system(){
		//std::cout<<"Entered setup_system()"<<std::endl;
		//Density mesh
		density_dof_handler.distribute_dofs(density_fe);
/*		density_hanging_node_constraints.clear();
		DoFTools::make_hanging_node_constraints(density_dof_handler,
				density_hanging_node_constraints);
		density_hanging_node_constraints.close();*/
		//FE mesh
		dof_handler.distribute_dofs(fe);
		hanging_node_constraints.clear();
		DoFTools::make_hanging_node_constraints(dof_handler,
						hanging_node_constraints);
		hanging_node_constraints.close();

		sparsity_pattern.reinit(dof_handler.n_dofs(),
				dof_handler.n_dofs(),
				dof_handler.max_couplings_between_dofs());

		DoFTools::make_sparsity_pattern(dof_handler, sparsity_pattern);

		hanging_node_constraints.condense(sparsity_pattern);
		sparsity_pattern.compress();
		system_matrix.reinit(sparsity_pattern);

		solution.reinit(dof_handler.n_dofs());
		system_rhs.reinit(dof_handler.n_dofs());

		nodal_density.reinit(density_dof_handler.n_dofs());
	}

	template <int dim>
	void TopOptimization<dim>::assemble_system(){
		std::cout<<"Entered assemble_system()"<<std::endl;
		const unsigned int dofs_per_cell = fe.dofs_per_cell;
		const unsigned int density_per_cell = density_fe.dofs_per_cell;
		FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
		FullMatrix<double> normalized_matrix(dofs_per_cell, dofs_per_cell);
		Vector<double> cell_rhs(dofs_per_cell);
		Vector<double> cell_density(density_per_cell);
		std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);
		std::vector<types::global_dof_index> local_density_indices(density_per_cell);
		ConstantFunction<dim> lambda(1.), mu(1.);
		rho_values.cycle = cycle;
		if (cycle  == 0 && itr_count == 0){
			elastic_data.current_quad_rule = current_quad_rule;
			elastic_data.running_quad_rule = running_quad_rule;
			//current_quad_rule  will be updated on adaptivity in quadrature
			QGauss<2> temp_quad(current_quad_rule);
			elastic_data.nu = nu;
			//elastic_data.fe = fe;
			cellprop.clear();
			density_mesh.clear();
			projection_radius = max_projection_radius;
			cellprop.resize(triangulation.n_active_cells());
			//Initialize the density values for all the cells
			for(unsigned int c_itr = 0;  c_itr  < cellprop.size(); ++c_itr){
				cellprop[c_itr].quadrature_formula = current_quad_rule;
				cellprop[c_itr].n_q_points = temp_quad.size();
				cellprop[c_itr].initialize_density(volfrac);
				cellprop[c_itr].cell_area = 0.00001;
			}
		}

		//updating the user indices to connect cell with cell_itr
		typename DoFHandler<dim>::active_cell_iterator cell = dof_handler.begin_active(),
				endc = dof_handler.end();
		unsigned int cell_itr = 0;
		for(; cell != endc; ++cell){
			cell->set_user_index(cell_itr + 1);
			++cell_itr;
		}

		if(itr_count == 0){
			double time1 = clock();
			std::cout<<"Looking for neighbours;   ";
			rho_values.create_neighbours(cellprop,
					fe,
					dof_handler,
					projection_radius);
			double time2 = clock();
			time2 = (time2 - time1)/(double)CLOCKS_PER_SEC;
			std::cout<<"Neighbours' indices stored : time taken = "<<time2<<" seconds"<<std::endl;
		}
		//Apply filter on densities
		filter();
		//elastic_data.check_linker();
		elastic_data.update_elastic_matrices(fe, dof_handler);     //Creates the needed B and D matrices
		Penalization penal;
		RightHandSide<dim> right_hand_side;
		cell = dof_handler.begin_active(), endc = dof_handler.end();
		typename DoFHandler<dim>::active_cell_iterator density_cell = density_dof_handler.begin_active(),
				density_endc = density_dof_handler.end();
		cell_itr = 0;
		std::cout<<"Cellprop vector size : "<<cellprop.size()<<std::endl;
		for (; cell != endc; ++cell){
			cell_matrix = 0;
			cell_rhs = 0;
			cell_density = 0;
			QGauss<dim> quadrature_formula(cellprop[cell_itr].quadrature_formula);
			FEValues<dim> fe_values(fe,
					quadrature_formula,
					update_values |
					update_gradients |
					update_quadrature_points |
					update_JxW_values
					);
			FEValues<dim> density_fe_values(density_fe,
					quadrature_formula,
					update_values |
					update_gradients |
					update_quadrature_points |
					update_JxW_values
					);
			fe_values.reinit(cell);
			density_fe_values.reinit(density_cell);
			unsigned int n_q_points = quadrature_formula.size();
			if(cycle == 0 && itr_count == 0){
				max_cell_area = cell->measure();
				cellprop[cell_itr].cell_area = cell->measure();
				rho_values.max_cell_area = max_cell_area;
			}
			//std::cout<<"Reached here  "<<cell_itr<<std::endl;
			std::vector<Vector<double>> rhs_values(n_q_points,
					Vector<double>(dim));
			right_hand_side.vector_value_list(fe_values.get_quadrature_points(),
					rhs_values);
			double adaptive_penal = get_penal_power(
					penal_power,
					itr_count,
				   no_iterations,
					cycle,
					no_cycles);
			if(cell_itr == 0){
				std::cout<<"Penalization factor : "<<adaptive_penal<<std::endl;
			}
			std::vector<Point<dim> > qpoints = fe_values.get_quadrature_points();
			penal.set_param(E0, Emin,
					cellprop[cell_itr].E_values,
					cellprop[cell_itr].dE_values,
					cellprop[cell_itr].xPhys,
					penalization_model,
					adaptive_penal
					);
			double total_weight = 0.0;
			double area_factor = 1;//cellprop[cell_itr].cell_area/max_cell_area;
			for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
				unsigned int quad_index = elastic_data.get_quad_index(cellprop[cell_itr].quadrature_formula);
				normalized_matrix = elastic_data.elem_stiffness_array[quad_index][q_point];
				cell_matrix.add(cellprop[cell_itr].E_values[q_point] * area_factor,
						normalized_matrix);

				total_weight += fe_values.JxW(q_point);
			}
			for(unsigned int i = 0; i < dofs_per_cell; ++i){
				const unsigned int component_i = fe.system_to_component_index(i).first;
				for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
					cell_rhs(i) += fe_values.shape_value(i, q_point) *
							rhs_values[q_point](component_i) *
							fe_values.JxW(q_point);
				}
			}
			cell->get_dof_indices(local_dof_indices);

			for(unsigned int i = 0; i < dofs_per_cell; ++i){
				for(unsigned int j = 0; j < dofs_per_cell; ++j){
					system_matrix.add(local_dof_indices[i],
							local_dof_indices[j],
							cell_matrix(i, j));
				}
				system_rhs(local_dof_indices[i]) += cell_rhs(i);
			}
			density_cell->get_dof_indices(local_density_indices);
			for(unsigned int i = 0; i < density_per_cell; ++i){
				for(unsigned int q_point = 0 ; q_point < n_q_points; ++q_point){
					cell_density(i) += 	cellprop[cell_itr].xPhys[q_point] *
							(fe_values.JxW(q_point)/total_weight);
				}
				nodal_density(local_density_indices[i]) += cell_density(i);
			}
			++density_cell;
			++cell_itr;
		}
		rho_values.update_density_mesh(cellprop,
				density_mesh);
		hanging_node_constraints.condense(system_matrix);
		hanging_node_constraints.condense(system_rhs);

		std::map<types::global_dof_index, double> boundary_values;
		VectorTools::interpolate_boundary_values(dof_handler,
				42,
				BoundaryValues<dim>(),
				boundary_values);
		MatrixTools::apply_boundary_values(boundary_values,
				system_matrix,
				solution,
				system_rhs);

		//Define a point force
		const Point<dim> load_point(xmax, (ymax+ymin)/2);
		const Point<dim> load(0, -1);
		VectorTools::create_point_source_vector(dof_handler, load_point, load, system_rhs);

	}

	template <int dim>
	void TopOptimization<dim>::boundary_info(){
		//This function defines the fixed degrees of freedom
		for (typename Triangulation<dim>::active_cell_iterator
				cell = triangulation.begin();
				cell != triangulation.end();
				++cell ){
			for (unsigned int f = 0; f < GeometryInfo<dim>::faces_per_cell; ++f){
				//std::cout<<cell->face(f)->center()(0)<<std::endl;
				if(model_problem == 1){
					if (std::fabs(cell->face(f)->center()(0) - (xmin)) < 1e-12){
						cell->face(f)->set_boundary_indicator(42);
					}
				}
				else if (model_problem == 2) {
					double rball = 0.02;
					Point<dim> center_point;
					center_point(0) = xmin + rball;
					center_point(1) = (ymax+ymin)/2;
					Point<dim> temp_point = cell->face(f)->center();
					if (temp_point.distance(center_point) < rball){
						cell->face(f)->set_boundary_indicator(42);
					}
				}

/*				for(unsigned int v = 0; v < GeometryInfo<dim>::vertices_per_face; ++v){
					if((std::fabs(cell->face(f)->vertex(v)(0) - (2)) < 1e-12)
											&& (std::fabs(cell->face(f)->vertex(v)(1) - (-1)) < 1e-12))
					{
						cell->face(f)->set_boundary_indicator(42);
					}
				}*/
			}
		}
	}

	template <int dim>
	void TopOptimization<dim>::filter(){
		rho_values.filter(cellprop);
	}

	template <int dim>
	void TopOptimization<dim>::refine_grid(){
/*		Vector<float> estimated_error_per_cell(triangulation.n_active_cells());
		KellyErrorEstimator<dim>::estimate(
				dof_handler,
				QGauss<dim-1>(2),
				typename FunctionMap<dim>::type(),
				solution,
				estimated_error_per_cell);

		GridRefinement::refine_and_coarsen_fixed_number(
				triangulation,
				estimated_error_per_cell,
				0.1,
				0.05);*/
		DensityIndicator refine_object;
		refine_object.cycle = cycle;
		refine_object.no_cycles = no_cycles;
		refine_object.get_density_indicator(triangulation,
				density_triangulation,
				cellprop,
				elastic_data);
		if(cycle > 0){
			std::cout<<"Reached here"<<std::endl;
		}
		triangulation.execute_coarsening_and_refinement();
		density_triangulation.execute_coarsening_and_refinement();
		update_cellprop();
		}

	template <int dim>
	void TopOptimization<dim>::update_cellprop(){
		std::cout<<"Updating cell properties record"<<std::endl;
		std::vector<CellProperties> temp_cellprop;
		temp_cellprop.clear();
		temp_cellprop = cellprop;
		cellprop.clear();
		cellprop.resize(triangulation.n_active_cells());
		unsigned int cell_itr = 0;
		typename DoFHandler<dim>::active_cell_iterator cell = dof_handler.begin_active(),
				endc = dof_handler.end();
		for(; cell != endc; ++cell){
			if(cell->level() > 0 && cell->parent()->user_index() > 0){
				cellprop[cell_itr] = temp_cellprop[cell->parent()->user_index() - 1];
				QGauss<dim> qformula_child(cellprop[cell_itr].quadrature_formula);
				FEValues<dim> fevalues_child(fe,
						qformula_child,
						update_values |
						update_gradients |
						update_quadrature_points |
						update_JxW_values
						);

				QGauss<dim> qformula_parent(cellprop[cell_itr].quadrature_formula);
				FEValues<dim> fevalues_parent(fe,
						qformula_child,
						update_values |
						update_gradients |
						update_quadrature_points |
						update_JxW_values
						);
				unsigned int no_q_points = cellprop[cell_itr].material_density.size();
				fevalues_child.reinit(cell);
				std::vector<Point<dim> > child_qpoints = fevalues_child.get_quadrature_points();
				fevalues_parent.reinit(cell->parent());
				std::vector<Point <dim> > parent_qpoints = fevalues_parent.get_quadrature_points();
				for(unsigned int qchild = 0; qchild < no_q_points; ++qchild){
					double dmin = 99999;
					Point<dim> p_child = child_qpoints[qchild];
					for(unsigned int qparent = 0; qparent < no_q_points; ++qparent){
						Point<dim> p_parent = parent_qpoints[qparent];
						if(p_parent.distance(p_child) >= dmin){
							continue;
						}
						cellprop[cell_itr].material_density[qchild] = temp_cellprop[cell->parent()->user_index() - 1].material_density[qparent];
						dmin = p_parent.distance(p_child);
					}
				}
			}

			if(cell->user_index() > 0){
				cellprop[cell_itr] = temp_cellprop[cell->user_index() - 1];
			}
			cellprop[cell_itr].cell_area = cell->measure();
			cellprop[cell_itr].neighbour_cells.clear();
			cellprop[cell_itr].neighbour_distance.clear();
			cellprop[cell_itr].neighbour_weights.clear();
			++cell_itr;
		}

			//clearing temp_cellprop
			temp_cellprop.clear();

		//Clearing the user_index for all cells
		cell = dof_handler.begin_active(),
				endc = dof_handler.end();
		cell_itr = 0;
		for(; cell != endc; ++cell){
			if(cell->level() > 0 && cell->parent()->user_index() > 0){
				cell->parent()->clear_user_index();
			}
			if(cell->user_index() > 0){
				cell->clear_user_index();
			}
		}
	}

	template <int dim>
	double TopOptimization<dim>::get_penal_power(double penal_power,
			unsigned int itr_count,
			unsigned int no_iterations,
			unsigned int cycle,
			unsigned int no_cycles){
		double dpenal = penal_power - 1.0;
		double dp = dpenal/(no_iterations*(no_cycles-1));
		//double dp = dpenal/((no_iterations-50)*(no_cycles));
		double output = 1.0;
		output += dp * ((cycle)*no_iterations + itr_count + 1);
		output = (output > 3) ? 3:output;
		output = 3.0;
		return output;
	}

	template <int dim>
	void TopOptimization<dim>::solve(){

		SolverControl solver_control(5000, 1e-11);
		SolverCG<> cg(solver_control);

		PreconditionSSOR<> preconditioner;
		preconditioner.initialize(system_matrix, 1.2);
		cg.solve(system_matrix,
				solution,
				system_rhs,
				preconditioner);

		hanging_node_constraints.distribute(solution);
		//solution.
	}

	template <int dim>
	void TopOptimization<dim>::optimize_OC(){
		std::cout<<"OC method initiated"<<std::endl;
		double density_sum = 0.0;
		double l1 = 1e-5, l2 = 100000, move = 0.2;
		while ((l2 - l1) > 1e-4){
			double lmid = 0.5*(l1  + l2);
			//std::cout<<density_mesh.size()<<"   "<<dobj_ddn.size()<<std::endl;
			for (int i = 0; i < density_mesh.size(); ++i){
				double octemp1;
				double old_density = old_density_mesh[i];
				//std::cout<<"Old density : "<<old_density<<std::endl;
				if (dobj_ddn[i] > 0){
					std::cout<<"Error located "<<dobj_ddn[i]<<std::endl;
					//dobj_ddn[i] = -1e-10;
					//octemp1 = old_density[i][j]+move;
				}
				//std::cout<<dobj_ddn[i]<<std::endl;
				octemp1 = old_density * (sqrt(-dobj_ddn[i]/lmid));
				//std::cout<<"octemp1: "<<octemp1<<std::endl;
				if ((old_density + move) < octemp1){
					octemp1 = old_density + move;
				}
				if (octemp1 > 1){
					octemp1 = 1;
				}
				if ((old_density - move) > octemp1){
					octemp1 = old_density - move;
				}
				if (octemp1 < 0.00001){
					octemp1 = 0.00001;
				}

				//density_sum += octemp1;
				density_mesh[i] = octemp1;
			}
/*
			if(cycle > 0){
				density_mesh = old_density_mesh;
			}*/
			rho_values.get_vol_fraction(
					cellprop,
					density_mesh,
					density_sum,
					max_cell_area,
					elastic_data);
			//std::cout<<(density_sum/(x_count*y_count))<<std::endl;
			if(density_sum - (volfrac*x_count*y_count) > 0){
				l1 = lmid;
			}
			else{
				l2 = lmid;
			}
		}
		//std::cout<<density_sum<<std::endl;
		std::cout<<"Volfrac: "<<(density_sum/(x_count*y_count))<<std::endl;
	}

	template <int dim>
	void TopOptimization<dim>::output_results(unsigned int iter) const{
		std::string filename = "solution-";
		std::string density_filename = "density-";
		std::stringstream ss;
		ss<< cycle +1<<"_"<<itr_count+1;
		filename += ss.str();
		density_filename += ss.str();
		//Assert(cycle < 10, ExcInternalError());
		filename += ".vtk";
		density_filename += ".vtk";

		std::ofstream output(filename.c_str());
		DataOut<dim> data_out;
		data_out.attach_dof_handler(dof_handler);

		std::vector<std::string> solution_names;
		switch(dim){
		case 1:
			solution_names.push_back("displacement");
			break;
		case 2:
			solution_names.push_back("x_displacement");
			solution_names.push_back("y_displacement");
			break;
		case 3:
			solution_names.push_back("x_displacement");
			solution_names.push_back("y_displacement");
			solution_names.push_back("z_displacement");
			break;
		default:
			Assert(false, ExcNotImplemented);
		}

		data_out.add_data_vector(solution, solution_names);
		data_out.build_patches();
		data_out.write_vtk(output);

		//For density output
		std::ofstream density_output(density_filename.c_str());
		DataOut<dim> density_data_out;
		density_data_out.attach_dof_handler(density_dof_handler);

		std::vector<std::string> density_solution_name;
		density_solution_name.push_back("Density");
		double max_nodal = 0.0;
		double max_denmesh = 0.0;
		for(unsigned int i = 0; i < nodal_density.size(); ++i){
			//std::cout<<nodal_density.size()<<std::endl;
			if(nodal_density(i) > max_nodal){
				max_nodal = nodal_density(i);
			}
		}

		for(unsigned int i = 0; i < density_mesh.size(); ++i){
			if(density_mesh[i] > max_denmesh){
				max_denmesh = density_mesh[i];
			}
		}

		//Data
		std::cout<<"Nodal density : "<<max_nodal <<"  "<<max_denmesh<<std::endl;
		density_data_out.add_data_vector(nodal_density, density_solution_name);
				//DataOut<dim, DoFHandler<dim, 2> >::type_cell_data);

		density_data_out.build_patches();
		density_data_out.write_vtk(density_output);
	}

	template<int dim>
	void TopOptimization<dim>::fem_solver(
			int itr){
		if (cycle == 0 && itr == 0){
			//physical size of the design domain
			if(model_problem == 1){
				xmin = 0;
				ymin = 0;
				xmax = 2;
				ymax = 1;
			}
			else if (model_problem == 2) {
				xmin = 0;
				ymin = 0;
				xmax = 1.5;
				ymax = 1;
			}
			const Point<2> point1(xmin, ymin);
			const Point<2> point2(xmax, ymax);
			std::vector<unsigned int> repetitions; // It defines the number of subdivisions in each direction
			repetitions.push_back(x_count);
			repetitions.push_back(y_count);
			GridGenerator::subdivided_hyper_rectangle(triangulation,
					repetitions,
					point1,
					point2,
					false
					);
			GridGenerator::subdivided_hyper_rectangle(density_triangulation,
					repetitions,
					point1,
					point2,
					false
					);
			std::cout<<"Active cells: "
					<<triangulation.n_active_cells();
			boundary_info();
			//setup_system();
;

		}
		if(cycle > 0 && itr == 0){
			//triangulation.refine_global(1);
			refine_grid();
			std::cout<<"Active cells: "
					<<triangulation.n_active_cells()
					<<std::endl;
		}
		std::ofstream myfile1;
		if(itr_count == 0){
			std::string output_fname = "output.txt";
			myfile1.open(output_fname.c_str(), std::ofstream::app);
			myfile1<<"FE mesh: "<<triangulation.n_active_cells()<<"\n";
			//myfile1<<"Design mesh: "<<design_x_count*design_y_count<<"\n";
			myfile1.close();
		}
		boundary_info();
		setup_system();
		std::cout<<"No. of degrees of freedom  : "
				<<dof_handler.n_dofs()
				<<std::endl;
		std::cout<<"Iteration: "<<itr + 1<<std::endl;
		assemble_system();
		solve();
	}


	template<int dim>
	void TopOptimization<dim>::calculate_sensitivities(){
		objective = 0.0;
		unsigned int cell_itr = 0;
		typename DoFHandler<dim>::active_cell_iterator cell = dof_handler.begin_active(),
				endc = dof_handler.end();
		for(; cell != endc; ++cell){
			unsigned int quadrature_rule = cellprop[cell_itr].quadrature_formula;
			QGauss<dim> quadrature_formula(quadrature_rule);
			FEValues<dim> fe_values(fe,
					quadrature_formula,
					update_values |
					update_gradients |
					update_quadrature_points |
					update_JxW_values
					);
			const unsigned int dofs_per_cell = fe.dofs_per_cell;
			const unsigned int n_q_points = quadrature_formula.size();
			std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);
			FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
			fe_values.reinit(cell);
			cell_matrix = 0;
			std::vector<double> E_values, dE_values;
			E_values = cellprop[cell_itr].E_values;
			dE_values = cellprop[cell_itr].dE_values;
			unsigned int quad_index = elastic_data.get_quad_index(quadrature_rule);
			for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
				FullMatrix<double> normalized_matrix = elastic_data.elem_stiffness_array[quad_index][q_point];
				double area_factor = 1;//(cellprop[cell_itr].cell_area)/max_cell_area;
				cell_matrix.add((E_values[q_point])*area_factor,
						normalized_matrix);
				//std::cout<<cellprop[cell_itr].material_density[q_point]<<std::endl;
			}
			//Extracting the nodal values of solution vector
			Vector<double> cell_array(dofs_per_cell);
			cell_array = 0;
			cell->get_dof_indices(local_dof_indices);
			for(unsigned int i = 0; i < dofs_per_cell; ++i){
				cell_array[i] = solution(local_dof_indices[i]);
			}
			Vector<double> temp_array(dofs_per_cell);
			temp_array = 0;
			MatrixVector matvec;
			matvec.vector_matrix_multiply(
					cell_array,
					cell_matrix,
					temp_array,
					dofs_per_cell,
					dofs_per_cell);
			objective += matvec.vector_vector_inner_product(
					temp_array,
					cell_array);
			++cell_itr;
		}
		std::cout<<"Objective: "<<objective<<std::endl;
		std::ofstream myfile1;
		std::string output_fname = "output.txt";
		myfile1.open(output_fname.c_str(), std::ofstream::app);

		myfile1<<"Cycle: "<<std::setw(3)<<cycle<<"            Iteration : "<<std::setw(6)<<itr_count<<"               Obj : "<<std::setw(10)<<objective<<std::endl;
		myfile1.close();
		//Calculating the sensitivities with respect to the density space design variables
		std::cout<<"Computing sensitivity response "<<std::endl;
		double time1 = clock();
		cell_itr = 0;
		dobj_ddn.clear();
		cell = dof_handler.begin_active(),
						endc = dof_handler.end();
		for(; cell != endc; ++cell){
			unsigned int quadrature_rule = cellprop[cell_itr].quadrature_formula;
			unsigned int quad_index = elastic_data.get_quad_index(quadrature_rule);
			QGauss<dim> quadrature_formula(quadrature_rule);
			FEValues<dim> fe_values(fe,
					quadrature_formula,
					update_values |
					update_gradients |
					update_quadrature_points |
					update_JxW_values
					);
			const unsigned int dofs_per_cell = fe.dofs_per_cell;
			const unsigned int n_q_points = quadrature_formula.size();
			std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);
			FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
			fe_values.reinit(cell);
			std::vector<double> E_values, dE_values;
			dE_values = cellprop[cell_itr].dE_values;

			//Extracting the nodal values of solution vector
			Vector<double> cell_array(dofs_per_cell);
			cell_array = 0;
			cell->get_dof_indices(local_dof_indices);
			for(unsigned int i = 0; i < dofs_per_cell; ++i){
				cell_array[i] = solution(local_dof_indices[i]);
			}
			for(int q_point = 0; q_point < n_q_points; ++q_point){
				cell_matrix = 0;
				double dobj;
				for(unsigned int i = 0 ; i < cellprop[cell_itr].neighbour_cells[q_point].size(); ++i){
					unsigned int cell_itr2 = cellprop[cell_itr].neighbour_cells[q_point][i].first;
					unsigned int q_point2 = cellprop[cell_itr].neighbour_cells[q_point][i].second;
					unsigned int quad_index2 = elastic_data.get_quad_index(cellprop[cell_itr2].quadrature_formula);
					FullMatrix<double> normalized_matrix = elastic_data.elem_stiffness_array[quad_index2][q_point2];
					double dE_dxPhys = cellprop[cell_itr2].dE_values[q_point2];
					double dxPhys_dx = rho_values.get_dxPhys_dx(cellprop[cell_itr2],
							q_point,
							cell_itr,
							q_point2);
					double dEfactor = dE_dxPhys * dxPhys_dx;
					double area_factor = cellprop[cell_itr2].cell_area/max_cell_area;
					cell_matrix.add(dEfactor,//*area_factor,
							normalized_matrix);
				}

				//std::cout<<dE_values[q_point]<<"   "<<q_point<<std::endl;
;
				Vector<double> temp_array(dofs_per_cell);
				temp_array = 0;
				MatrixVector matvec;
				matvec.vector_matrix_multiply(
						cell_array,
						cell_matrix,
						temp_array,
						dofs_per_cell,
						dofs_per_cell);
				dobj = matvec.vector_vector_inner_product(
						temp_array,
						cell_array);
				dobj_ddn.push_back(-dobj);
			}
			cell_itr++;
		}
		std::cout<<"Size of sensitivity vector : "<<dobj_ddn.size()<<std::endl;
		double time2 = clock();
		time2 = (time2 - time1)/(double)CLOCKS_PER_SEC;
		std::cout<<"CPU time for sensitivity analysis: "<<time2<<" seconds"<<std::endl;
		std::cout.precision(15);
	}

	template <int dim>
	void TopOptimization<dim>::run(){
		old_objective = 9999999999;
		double min_change = 1e-3;
		std::string output_fname = "output.txt";
		std::ofstream myfile1;
		myfile1.open(output_fname.c_str(), std::ofstream::out);
		myfile1<<"FE mesh: "<<x_count<<" "<<y_count<<"\n";
		myfile1<<"Design mesh: "<<design_x_count<<" "<<design_y_count<<"\n";
		myfile1<<"Max projection radius: "<<max_projection_radius<<"\n";
		myfile1<<"Gamma: "<<gamma<<"\n";
		myfile1.close();
		for(; cycle < no_cycles; ++cycle){
			elem_neighbors.clear();
			std::cout<<"Cycle : "<<cycle + 1<<std::endl;
			itr_count = 0;
			for (; itr_count < no_iterations; ++itr_count){
				fem_solver(itr_count); //Solves the finite element mesh
				calculate_sensitivities();
				old_density_mesh.clear();
				old_density_mesh = density_mesh;
				if(cycle > 0 && itr_count < 0){

				}
				else{
					optimize_OC();

				}
				output_results(itr_count);
				system_matrix.clear();
				dobj_ddn.clear();
				des_analysis.clear();

				//check the change
				double obj_change = fabs(old_objective - objective);
				std::cout<<old_objective<<" "<<objective<<std::endl;
				if(obj_change < min_change){
					break;
				}
				old_objective = objective;
			}
		}
	}
}

int main()
{
	try{
		using namespace Step1;
		deallog.depth_console(0);

		Step1::TopOptimization<2> topopt2d;
		//Lines below initialize the parameters for the SIMP model
		topopt2d.E0 = 1.0;
		topopt2d.Emin = 1e-9;
		topopt2d.nu = 0.3;
		topopt2d.penalization_model = 1; //SIMP model
		topopt2d.model_problem = 1;
		topopt2d.penal_power = 3.0;
		topopt2d.current_quad_rule = 2;
		topopt2d.running_quad_rule = 2;
		if(topopt2d.model_problem == 1){
			//This model refers to a MBB
			topopt2d.volfrac = 0.45; //volume constraint
			topopt2d.x_count = 40;
			topopt2d.y_count = 20;
			topopt2d.design_x_count = 320; // mesh size for the design mesh
			topopt2d.design_y_count = 160; //mesh size for the design mesh
		}
		else if(topopt2d.model_problem == 2){
			//This model problem refers to a Michell struss problem
			topopt2d.volfrac = 0.15; //volume constraint
			topopt2d.x_count = 40;
			topopt2d.y_count = 20;
			topopt2d.design_x_count = 360; // mesh size for the design mesh
			topopt2d.design_y_count = 240; //mesh size for the design mesh
		}
		topopt2d.no_iterations =100;
		topopt2d.max_projection_radius = 0.054;
		topopt2d.gamma = 1.0;
		topopt2d.cycle = 0;
		topopt2d.no_cycles = 5;
		std::cout<<"Topology optimization initiated "<<std::endl;
		topopt2d.run();
		std::cout<<"Success"<<std::endl;
	}
	catch(std::exception &exc){
		std::cerr<<std::endl<<std::endl
				<<"------------------------------------------------------"
				<<std::endl;
		std::cerr<<"Exception on processing "<<std::endl
				<<exc.what()<<std::endl
				<<"Aborting! "<<std::endl
				<<"------------------------------------------------------"
				<<std::endl;
		return 1;

	}
	catch(...){
		std::cerr<<std::endl<<std::endl
				<<"------------------------------------------------------"
				<<std::endl;
		std::cerr<<"EUnknown Exception "<<std::endl
				<<"Aborting! "<<std::endl
				<<"------------------------------------------------------"
				<<std::endl;
		return 1;

	}
}
