/*
 *
 *  Created on: Aug 14, 2016
 *      Author: Deepak K. Gupta
 *  
 */
#include <atop/TopologyOptimization/adaptivity/dp_adaptivity.h>
#include <atop/TopologyOptimization/cell_prop.h>
#include <atop/TopologyOptimization/designField.h>
#include <atop/fem/fem.h>
#include <math.h>
#include <vector>
#include <deal.II/hp/dof_handler.h>
#include <deal.II/lac/constraint_matrix.h>
#include <deal.II/numerics/vector_tools.h>
#include <deal.II/base/function.h>




using namespace atop;

template <int dim>
void dpAdaptivity<dim>::update_designField(
		std::vector<CellInfo> &cell_info_vector,
		unsigned int cell_itr,
		unsigned int new_design_count){

	if (cell_info_vector[cell_itr].design_points.no_points == new_design_count)
		return;
	std::vector<std::vector<double> > old_pointX;
	std::vector<double> old_rho;

	old_pointX = std::move(cell_info_vector[cell_itr].design_points.pointX);
	old_rho = std::move(cell_info_vector[cell_itr].design_points.rho);

	//Updating the design field for this cell
	//Here, we currently have only manual update where points are assigned manually
	//new_design_count = cell_info_vector[cell_itr].design_points.no_points;
	//std::cout<<"Hello : "<<new_design_count<<std::endl;
	//cell_info_vector[cell_itr].design_points.no_points = new_design_count;
	cell_info_vector[cell_itr].design_points.update_no_points(new_design_count);

	cell_info_vector[cell_itr].design_points.update_field_manual(0);	//manually assigning the points

	//Projecting the density field, more advanced way needs to be implemented in future
	project_design(old_rho,
			old_pointX,
			cell_info_vector[cell_itr].design_points.rho,
			cell_info_vector[cell_itr].design_points.pointX);
}


template <int dim>
void dpAdaptivity<dim>::correctify_p_order(
		FEM<dim> &fem,
		std::vector<CellInfo> &cell_info_vector,
		unsigned int rigid_body_modes){


	this->rigid_body_modes = rigid_body_modes;
	//Updating the element level bounds for all the cells

	//Update p-orders to satisfy the bounds
	unsigned int cell_itr = 0;
	typename hp::DoFHandler<dim>::active_cell_iterator cell = fem.dof_handler.begin_active(),
			endc = fem.dof_handler.end();
	for (; cell != endc; ++cell){
		do{
			//Update the design bound for the cell
			get_corrected_design_bound(fem, cell_info_vector, cell);

			if (cell_info_vector[cell_itr].design_bound < cell_info_vector[cell_itr].design_points.no_points){
				cell_info_vector[cell_itr].shape_function_order++;	//increase the shape order by 1
				cell_info_vector[cell_itr].refine_coarsen_flag = 1;	//now this cell is already refined
			}

		}while(cell_info_vector[cell_itr].design_bound < cell_info_vector[cell_itr].design_points.no_points);
		//std::cout<<cell_itr<<"    corrected element bound : "<<cell_info_vector[cell_itr].design_bound<<std::endl;

		cell_itr++;
	}
}

template <int dim>
unsigned int dpAdaptivity<dim>::get_design_bound(
		unsigned int p_order){
	return (pow(p_order + 1, dim) * dim - rigid_body_modes);
}

template <int dim>
void dpAdaptivity<dim>::get_corrected_design_bound(
		FEM<dim> &fem,
		std::vector<CellInfo> &cell_info_vector,
		typename hp::DoFHandler<dim>::active_cell_iterator &cell){

	//Get direct bound on the element based on dofs
	unsigned int cell_itr = cell->user_index() - 1;
	unsigned int design_bound = get_design_bound(cell_info_vector[cell_itr].shape_function_order);

	//Iterate over all the neighbour cells
	for (unsigned int iface = 0; iface < GeometryInfo<dim>::faces_per_cell; ++iface){
		unsigned int ng_shape_fn_order;
		if(cell->at_boundary(iface)) continue;
		if(cell->neighbor(iface)->active()){
			unsigned int ng_cell_itr = cell->neighbor(iface)->user_index() - 1;
			ng_shape_fn_order = cell_info_vector[ng_cell_itr].shape_function_order;
		}

		//Checking the hanging support point for the current cell
		//This needs to be updated for 3D, currently not right for 3D
		unsigned int shape_fn_order = cell_info_vector[cell_itr].shape_function_order;
		if (shape_fn_order <= ng_shape_fn_order)	continue;
		design_bound = design_bound - ((pow(shape_fn_order, dim-1) - pow(ng_shape_fn_order, dim-1))*dim);
	}
	//std::cout<<"cell_itr : "<<design_bound<<std::endl;
	cell_info_vector[cell_itr].design_bound = design_bound;
}


//Getting the system level bound
template <int dim>
unsigned int dpAdaptivity<dim>::get_system_design_bound(
		FEM<dim> &fem){
	unsigned int total_dofs = fem.dof_handler.n_dofs();
	unsigned int no_hanging_nodes = (fem.hanging_node_constraints).n_constraints();
	//std::cout<<"No. of hanging nodes : "<<no_hanging_nodes<<std::endl;
	rigid_body_modes = 3;	//hard coded right now for 2d elastostatic problem
	unsigned int sys_bound = total_dofs - no_hanging_nodes - rigid_body_modes;
	std::cout<<"System level bound : "<<sys_bound<<std::endl;
	return sys_bound;

}

//This function projects a certain polynomial order density field on a new polynomial description
template <int dim>
void dpAdaptivity<dim>::project_design(
		std::vector<double> &old_rho,
		std::vector<std::vector<double> > &old_pointX,
		std::vector<double> &new_rho,
		std::vector<std::vector<double> > &new_pointX
		){


	unsigned int new_no_points = new_pointX.size();

	for (unsigned int pt = 0; pt < new_no_points; ++pt){
		double new_den = 0.0;
		double sum_weights = 0.0;

		//Creating the new point
		Point<dim> new_point;
		for (unsigned int i = 0;i < dim; ++i){
			new_point(i) = new_pointX[pt][i];
		}

		//Taking contributions from all old point
		for (unsigned pt2 = 0; pt2 < old_pointX.size(); ++pt2){

			//Creating the new point
			Point<dim> old_point;
			for (unsigned int j = 0;j < dim; ++j){
				old_point(j) = old_pointX[pt2][j];
			}

			double diag_len = 2*sqrt(2.0);
			double distance = diag_len - old_point.distance(new_point);

			if (distance < 0)	std::cerr<<"Negative distance in dpAdaptivity::project_design()"<<std::endl;

			new_den += (old_rho[pt2] * distance);
			sum_weights += distance;
		}
		new_den /= sum_weights;
		new_rho[pt] = new_den;
	}
}


template <int dim>
unsigned int dpAdaptivity<dim>::get_corrected_system_design_bound(
		FEM<dim> &fem,
		std::vector<CellInfo> &cell_info_vector){

	unsigned int system_bound = 0;	//stores the  bound value

	fem.boundary_values.clear();
	//FE mesh
	fem.dof_handler.clear();
	fem.dof_handler.distribute_dofs(fem.fe_collection);

	fem.hanging_node_constraints.clear();

	unsigned int cell_itr = 0;
	for (typename hp::DoFHandler<dim>::active_cell_iterator cell = fem.dof_handler.begin_active();
			cell != fem.dof_handler.end(); ++cell){
		unsigned int p_index = fem.elastic_data.get_p_index(cell_info_vector[cell_itr].shape_function_order);
		cell->set_active_fe_index(p_index);
		cell_itr++;
	}


	DoFTools::make_hanging_node_constraints(fem.dof_handler,
			fem.hanging_node_constraints);

	fem.boundary_info();
	VectorTools::interpolate_boundary_values(fem.dof_handler,
			42,
			ZeroFunction<2>(),
			fem.hanging_node_constraints);

	//Applying the boundary conditions
	BoundaryValues<dim> boundary_v;

	VectorTools::interpolate_boundary_values(fem.dof_handler,
			42,
			boundary_v,
			fem.boundary_values);


	fem.hanging_node_constraints.close();
	std::cout<< "No.of degrees of freedom: " << fem.dof_handler.n_dofs() << "\n";
	std::cout<<"No. of hanging node constraints : "<<fem.hanging_node_constraints.n_constraints()<<std::endl;

	return 0;
}

template <int dim>
void dpAdaptivity<dim>::update_p_order_contrast(
		FEM<dim> &fem,
		std::vector<CellInfo> &cell_info_vector){



	unsigned int cell_itr = 0;
	typename hp::DoFHandler<dim>::active_cell_iterator cell = fem.dof_handler.begin_active(),
			endc = fem.dof_handler.end();
	for (; cell != endc; ++cell){

		//Iterate over all the neighbour cells
		/*
		 * If density->0, contrast_ctr is set to -1,
		 * else if density->0 set to 1
		 */

		int contrast_ctr = 0;
		if (fabs(cell_info_vector[cell_itr].cell_density) < 1e-6){
			contrast_ctr = -1;

		}
		if (fabs(cell_info_vector[cell_itr].cell_density - 1.0) < 1e-6){
			contrast_ctr = 1;

		}
		if (contrast_ctr != 0){
			for (unsigned int iface = 0; iface < GeometryInfo<dim>::faces_per_cell; ++iface){
				if(cell->at_boundary(iface)) continue;
				if(cell->neighbor(iface)->active()){
					unsigned int ng_cell_itr = cell->neighbor(iface)->user_index() - 1;

					//If the contrast_itr becomes -1 or 1, then the neighbor should also have the respective density value
					//else skip that cell
					if (fabs(cell_info_vector[ng_cell_itr].cell_density) > 1e-6 && fabs(cell_info_vector[ng_cell_itr].cell_density - 1.0) > 1e-6){
						contrast_ctr = 0;
						continue;

					}
					else{
						if (fabs(cell_info_vector[ng_cell_itr].cell_density) < 1e-6 && contrast_ctr == 1){
							contrast_ctr = 0;
							continue;
						}
						if (fabs(cell_info_vector[ng_cell_itr].cell_density - 1.0) < 1e-6 && contrast_ctr == -1){
							contrast_ctr = 0;
							continue;
						}
					}
				}

			}

			if (contrast_ctr != 0){
				cell_itr++;
				continue;
			}
		}

		unsigned int design_pt_diff = 0;
		for (unsigned int iface = 0; iface < GeometryInfo<dim>::faces_per_cell; ++iface){
			unsigned int ng_shape_fn_order;
			if(cell->at_boundary(iface)) continue;
			if(cell->neighbor(iface)->active()){
				//checking the shape function order of the neighbor
				unsigned int ng_cell_itr = cell->neighbor(iface)->user_index() - 1;
				ng_shape_fn_order = cell_info_vector[ng_cell_itr].shape_function_order;


			}
			unsigned int shape_fn_order = cell_info_vector[cell_itr].shape_function_order;
			if (shape_fn_order+1 < ng_shape_fn_order){
				shape_fn_order = ng_shape_fn_order-1;
			cell_info_vector[cell_itr].shape_function_order = shape_fn_order;
			}
		}


		cell_itr++;
	}

	return;
	//Introduce the symmetry part
	cell_itr = 0;
	cell = fem.dof_handler.begin_active(),
			endc = fem.dof_handler.end();
	for (; cell != endc; ++cell){
		if (cell_itr >= cell_info_vector.size())	break;

		unsigned int match_itr;

		unsigned int skip_rows = floor(cell_itr/(*(fem.mesh)).subdivisions[0]) + 1;
		unsigned norm_cell_itr = cell_itr % (*(fem.mesh)).subdivisions[0];
		match_itr = cell_info_vector.size() - (skip_rows * (*(fem.mesh)).subdivisions[0]) + norm_cell_itr;

/*		if (cell_info_vector[cell_itr].shape_function_order == cell_info_vector[match_itr].shape_function_order){
			++cell_itr;
			continue;
		}*/

		if (cell_info_vector[cell_itr].shape_function_order > cell_info_vector[match_itr].shape_function_order){
			cell_info_vector[match_itr].shape_function_order = cell_info_vector[cell_itr].shape_function_order;
		}
		else if (cell_info_vector[cell_itr].shape_function_order < cell_info_vector[match_itr].shape_function_order) {
			cell_info_vector[cell_itr].shape_function_order = cell_info_vector[match_itr].shape_function_order;
		}

		cell_itr++;
	}
}

template <int dim>
void dpAdaptivity<dim>::update_design_contrast(
		FEM<dim> &fem,
		std::vector<CellInfo> &cell_info_vector,
		unsigned int rbm){


	this->rigid_body_modes = rbm;

	unsigned int cell_itr = 0;
	typename hp::DoFHandler<dim>::active_cell_iterator cell = fem.dof_handler.begin_active(),
			endc = fem.dof_handler.end();
	for (; cell != endc; ++cell){

		/*
		 * If density->0, contrast_ctr is set to -1,
		 * else if density->0 set to 1
		 */

		int contrast_ctr = 0;
		if (fabs(cell_info_vector[cell_itr].cell_density) < 1e-6){
			contrast_ctr = -1;

		}
		if (fabs(cell_info_vector[cell_itr].cell_density - 1.0) < 1e-6){
			contrast_ctr = 1;

		}
		if (contrast_ctr != 0){
			for (unsigned int iface = 0; iface < GeometryInfo<dim>::faces_per_cell; ++iface){
				if(cell->at_boundary(iface)) continue;
				if(cell->neighbor(iface)->active()){
					unsigned int ng_cell_itr = cell->neighbor(iface)->user_index() - 1;

					//If the contrast_itr becomes -1 or 1, then the neighbor should also have the respective density value
					//else skip that cell
					if (fabs(cell_info_vector[ng_cell_itr].cell_density) > 1e-6 && fabs(cell_info_vector[ng_cell_itr].cell_density - 1.0) > 1e-6){
						contrast_ctr = 0;
						continue;

					}
					else{
						if (fabs(cell_info_vector[ng_cell_itr].cell_density) < 1e-6 && contrast_ctr == 1){
							contrast_ctr = 0;
							continue;
						}
						if (fabs(cell_info_vector[ng_cell_itr].cell_density - 1.0) < 1e-6 && contrast_ctr == -1){
							contrast_ctr = 0;
							continue;
						}
					}
				}

			}

			if (contrast_ctr != 0){
				cell_itr++;
				continue;
			}
		}

		//unsigned int design_pt_diff = 0;
		for (unsigned int iface = 0; iface < GeometryInfo<dim>::faces_per_cell; ++iface){
			unsigned int ng_no_design_pt;
			if(cell->at_boundary(iface)) continue;
			if(cell->neighbor(iface)->active()){
				//checking the shape function order of the neighbor
				unsigned int ng_cell_itr = cell->neighbor(iface)->user_index() - 1;
				//ng_shape_fn_order = cell_info_vector[ng_cell_itr].shape_function_order;
				ng_no_design_pt = cell_info_vector[ng_cell_itr].design_points.no_points;


			}
			//unsigned int shape_fn_order = cell_info_vector[cell_itr].shape_function_order;
			unsigned int no_design_points = cell_info_vector[cell_itr].design_points.no_points;
			if (round(sqrt(no_design_points)+1) < round(sqrt(ng_no_design_pt))){

/*				if (fabs(cell_info_vector[cell_itr].cell_density) < 1e-12 || fabs(cell_info_vector[cell_itr].cell_density - 1.0) < 1e-12){
					continue;
				}*/
				no_design_points = pow(round(sqrt((double)(ng_no_design_pt)) - 1), 2);
				//cell_info_vector[cell_itr].design_points.no_points = no_design_points;

				unsigned int min_dofs  = no_design_points + rigid_body_modes;
				unsigned int new_p_order = ceil(pow((min_dofs/(double)dim), 1/((double)dim)) - 1);
				if (cell_info_vector[cell_itr].refine_coarsen_flag == 1){
					if (new_p_order < cell_info_vector[cell_itr].shape_function_order){
						new_p_order = cell_info_vector[cell_itr].shape_function_order;	//To make sure cells refined during analysis refinement are not coarsened here
					}
				}

				//std::cout<<"New p : "<<new_p_order<<"    new_no_design : "<<new_no_design<<std::endl;
				cell_info_vector[cell_itr].shape_function_order = new_p_order;
				if (new_p_order <= 0){
					std::cerr<<"Zero shape function order found in Adaptivity class"<<std::endl;
					exit(0);
				}
				//Interpolate to the new design field for the current cell
				//std::cout<<no_design_points<<"    "<<new_p_order<<std::endl;
				update_designField(cell_info_vector,
						cell_itr,
						no_design_points);
			}

/*			//checking the difference in design points for deciding the projection radius
			unsigned int no_design_points = cell_info_vector[cell_itr].design_points.no_points;
			if ((no_design_points - ng_no_design_pt) > design_pt_diff){
				design_pt_diff = no_design_points - ng_no_design_pt;
				double cell_len = sqrt(cell->measure());
				double voxel_len = cell_len / ((double)sqrt(ng_no_design_pt));
				cell_info_vector[cell_itr].projection_radius = voxel_len * fem.projection->radius;


			}*/
		}


		cell_itr++;
	}

	//Introduce the symmetry part
	cell_itr = 0;
	cell = fem.dof_handler.begin_active(),
			endc = fem.dof_handler.end();
	for (; cell != endc; ++cell){
		if (cell_itr >= cell_info_vector.size())	break;

		unsigned int match_itr, change_itr, new_no_d_points;

		unsigned int skip_rows = floor(cell_itr/(*(fem.mesh)).subdivisions[0]) + 1;
		unsigned norm_cell_itr = cell_itr % (*(fem.mesh)).subdivisions[0];
		match_itr = cell_info_vector.size() - (skip_rows * (*(fem.mesh)).subdivisions[0]) + norm_cell_itr;

		if (cell_info_vector[cell_itr].design_points.no_points == cell_info_vector[match_itr].design_points.no_points){
			++cell_itr;
			continue;
		}

		if (cell_info_vector[cell_itr].design_points.no_points > cell_info_vector[match_itr].design_points.no_points){
			cell_info_vector[match_itr].shape_function_order = cell_info_vector[cell_itr].shape_function_order;
			update_designField(cell_info_vector,
					match_itr,
					cell_info_vector[cell_itr].design_points.no_points);
		}
		else if (cell_info_vector[cell_itr].design_points.no_points < cell_info_vector[match_itr].design_points.no_points) {
			cell_info_vector[cell_itr].shape_function_order = cell_info_vector[match_itr].shape_function_order;
						update_designField(cell_info_vector,
								cell_itr,
								cell_info_vector[match_itr].design_points.no_points);
		}

		cell_itr++;
	}
}

