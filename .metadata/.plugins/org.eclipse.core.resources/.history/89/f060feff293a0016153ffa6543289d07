/*
 *
 *  Created on: Jun 21, 2015
 *      Author: Deepak K. Gupta
 *  
 */

#include <atop/physics/mechanics/elastic.h>
#include <vector>
#include<iostream>
#include<deal.II/base/quadrature_lib.h>
#include <deal.II/fe/fe_system.h>
#include <deal.II/fe/fe_q.h>
#include<deal.II/fe/fe_values.h>

using namespace atop;
using namespace dealii;

template <int dim>
LinearElastic<dim>::LinearElastic(){
	obj_elas_data.nu = poisson;
}
void ElasticTools::get_lambda_mu(std::vector<double> &E_values,
		double nu,
		std::vector<double> &lambda_values,
		std::vector<double> &mu_values){
	unsigned int n_points = E_values.size();
	for(unsigned int i = 0; i < n_points; i++){
		lambda_values[i] = (E_values[i] * nu) / ((1 + nu) * (1 - (2 * nu)));
		//lambda_values[i] = (E_values[i] * nu) / (1 - (nu * nu));
		double K = (1 - (2 * nu))/(2 * nu);
		mu_values[i] = lambda_values[i] * K;
		//std::cout<<lambda_values[i]<<" "<<mu_values[i]<<std::endl;
	}
}

void ElasticTools::display_matrix(FullMatrix<double> &mat){
	unsigned int cols = mat.n_cols();
	unsigned int rows = mat.n_rows();
	for(unsigned int i = 0; i < rows; ++i){
		for(unsigned int j = 0; j < cols; ++j){
			std::cout<<mat(i, j)<<"  ";
		}
		std::cout<<std::endl;
	}
}
void ElasticTools::get_D_plane_stress2D(FullMatrix<double> &D_matrix,
		double nu){
	double k = 1/(1 - (nu*nu));
	D_matrix(0, 0) = k;
	D_matrix(0, 1) = nu*k;
	D_matrix(0, 2) = 0;
	D_matrix(1, 0) = nu*k;
	D_matrix(1, 1) = k;
	D_matrix(1, 2) = 0;
	D_matrix(2, 0) = 0;
	D_matrix(2, 1) = 0;
	D_matrix(2, 2) = ((1 - nu)*k)/2;
	//display_matrix(D_matrix);
}

void ElasticTools::get_B_matrix_2D(std::vector<FullMatrix<double> > &B_matrix_vector,
		std::vector<double> &JxW,
				unsigned int quadrature_rule,
				FESystem<2> &fe,
				DoFHandler<2> &dofhandler){
//	/std::cout<<quadrature_rule<<std::endl;
	QGauss<2> quadrature_formula(quadrature_rule);
	FEValues<2> fe_values(fe,
			quadrature_formula,
			update_values |
			update_gradients |
			update_quadrature_points |
			update_JxW_values
			);
	typename DoFHandler<2>::active_cell_iterator cell = dofhandler.begin_active();
	fe_values.reinit(cell);
	unsigned int dofs_per_cell = fe.dofs_per_cell;
	unsigned int n_q_points = quadrature_formula.size();
	FullMatrix<double> B_matrix(3, dofs_per_cell);
	for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
		B_matrix = 0;
		for (unsigned int k = 0; k < 3; ++k){
			for(unsigned int i = 0; i < dofs_per_cell; ++i){
				if (k == 2){
					int t1, t2;
					if (i % 2 == 0){
						t1 = 1;
						t2 = i + 1;
					}
					else{
						t1 = 0;
						t2 = i - 1;
					}
					B_matrix(k, i) = B_matrix(t1, t2);
				}
				else{
					unsigned int comp_i = fe.system_to_component_index(i).first;
					//std::cout<<"i : "<<i<<".......comp_i : "<<comp_i<<"...k : "<<k<<std::endl;
					if (comp_i == k){
						B_matrix(k, i) = fe_values.shape_grad(i, q_point)[k];
						//std::cout<<B_matrix(k, i)<<std::endl;
					}
					else{
						B_matrix(k, i) = 0;
					}
					//std::cout<<B_matrix(k, i)<<" "<<i<<" "<<q_point<<std::endl;
				}
			}
		}
		B_matrix_vector.push_back(B_matrix);
		JxW.push_back(fe_values.JxW(q_point));
	}
}

void ElasticTools::get_normalized_matrix(FullMatrix<double> &D_matrix,
		std::vector<FullMatrix<double> > &B_matrix_vector,
		std::vector<double> &JxW,
		std::vector<FullMatrix<double> > &elem_stiffness_array){
	elem_stiffness_array.clear();

	for(unsigned int i = 0; i < B_matrix_vector.size(); ++i){
		FullMatrix<double> elem_stiffness(B_matrix_vector[i].n_cols(), B_matrix_vector[i].n_cols());
		elem_stiffness = 0;
		elem_stiffness.triple_product(D_matrix,
				B_matrix_vector[i],
				B_matrix_vector[i],
				true,
				false,
				JxW[i]);
		elem_stiffness_array.push_back(elem_stiffness);
		display_matrix(B_matrix_vector[i]);

	}
}


void ElasticData::update_elastic_matrices(FESystem<2> &fe,
		DoFHandler<2> &dofhandler){
	ElasticTools elastic_tool;
	if (current_quad_rule > 1){
		D_matrix = FullMatrix<double>(3, 3);
		elastic_tool.get_D_plane_stress2D(D_matrix,
				nu);
	}
	B_matrix_list.resize(current_quad_rule);
	JxW.resize(current_quad_rule);
	elem_stiffness_array.resize(current_quad_rule);
	for(unsigned int  i = running_quad_rule - 1; i < current_quad_rule; ++i ){
		B_matrix_list[i].clear();
		JxW[i].clear();
		elastic_tool.get_B_matrix_2D(B_matrix_list[i],  JxW[i], i+1, fe, dofhandler);
		elastic_tool.get_normalized_matrix(D_matrix,
				B_matrix_list[i],
				JxW[i],
				elem_stiffness_array[i]);
		//check_linker();
	}
	running_quad_rule = current_quad_rule + 1;
	std::cout<<running_quad_rule;
}

unsigned int ElasticData::get_quad_index(unsigned int quad_rule){
	return (quad_rule - 1);
}

void ElasticData::check_linker(){
	std::vector<FullMatrix<double> > KEquads;
	KEquads = elem_stiffness_array[1];
	std::vector<double> JxWquads = JxW[1];
	FullMatrix<double> output(8, 8);
	output = 0;
	for(unsigned int i = 0 ; i < KEquads.size(); ++i){
		output.add(KEquads[i], 1);
	}
	ElasticTools els;
	els.display_matrix(output);
}

