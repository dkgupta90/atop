/*
 *
 *  Created on: Aug 5, 2015
 *      Author: Deepak K. Gupta
 *  
 */

#include <atop/TopologyOptimization/projection.h>
#include <atop/fem/define_mesh.h>
#include <math.h>
#include <deal.II/hp/dof_handler.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/grid/tria_iterator.h>
#include <deal.II/dofs/dof_accessor.h>
#include <math.h>

using namespace atop;

Projection::Projection(
		std::string type,
		double r,
		double g){
	projection_type = type;
	radius = r;
	gamma = g;
}

Projection::Projection(
		std::string type,
		double r){
	projection_type = type;
	radius = r;
	gamma = 1.0;
}

Projection::~Projection(){

}

Projection::Projection(
		std::string type,
		double r,
		double minR,
		double maxR){
	projection_type = type;
	this->fact = r;	//factor for current radius
	this->minFact = minR;	//factor for minimum projection
	this->maxFact = maxR;	//factor for maximum projection
}

Projection::Projection(
		std::string type,
		std::string adaptivity_Type,
		double r){
	projection_type = type;
	adaptivityType = adaptivity_Type;
	radius = r;
}

Projection::Projection(
		std::string type,
		std::string adaptivity_Type,
		double r,
		double g){
	projection_type = type;
	adaptivityType = adaptivity_Type;
	radius = r;
	gamma = g;
}

/*void Projection::update_projections(std::vector<CellInfo> &cell_info_vector,
		hp::DoFHandler<2> &dof_handler){

	//Iterating over all the cells
	typename hp::DoFHandler<2>::active_cell_iterator cell = dof_handler.begin_active(),
			endc = dof_handler.end();
	unsigned int cell_itr = 0;

	for (; cell != endc; ++cell){


		double cell_len = sqrt(cell->measure());
		double voxel_len = cell_len / (sqrt(cell_info_vector[cell_itr].design_points.no_points));
		cell_info_vector[cell_itr].projection_radius = voxel_len * radius;


		double d_factor = round((sqrt(cell_info_vector[cell_itr].pseudo_design_points.no_points)));
		cell_info_vector[cell_itr].projection_radius = (radius/(cycle+1)) * pow(gamma, cycle);//
														(radius*1.2)/d_factor; //0.2667; //(radius/d_factor) * pow(gamma, d_factor-1);
		cell_itr++;
	}

}*/

void Projection::update_projection(std::vector<CellInfo> &cell_info_vector){

		double d_factor = round((sqrt(cell_info_vector[0].pseudo_design_points.no_points)));
		true_radius = (radius*0.1)/d_factor;
}
