/*
 * DensityValues.cpp
 *
 *  Created on: Jul 14, 2014 at Precision & Microsystems Engineering group, TU Delft
 *      Author: Deepak K. Gupta
 */

#include <atop/TopologyOptimization/DensityValues.h>
#include <cmath>
#include <vector>
#include <iostream>
#include <assert.h>
#include <deal.II/base/point.h>
#include <deal.II/numerics/vector_tools.h>
#include <deal.II/numerics/matrix_tools.h>
#include <deal.II/grid/grid_tools.h>
#include <deal.II/fe/fe_values.h>
#include <atop/TopologyOptimization/neighbors.h>
#include <atop/TopologyOptimization/cell_prop.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/grid/tria_iterator.h>

#include <math.h>
using namespace topopt;
using namespace dealii;
using namespace atop;

//---------------------DENSITYFIELD CLASS MODULES-------------------------------------------------------------------

template <int dim>
void DensityField<dim>::create_neighbors(
		std::vector<CellInfo> &cell_info_vector,
		FESystem<dim> &fe,
		FESystem<dim> &density_fe,
		DoFHandler<dim> &dof_handler,
		DoFHandler<dim> &density_dof_handler,
		Projection &projection,
		bool mesh_coupling
		){

	/*
	 * Iterate over all the cells to check for neighbors
	 * iterated over the cells in triangulation
	 */
	unsigned int cell_itr1 = 0;
	typename DoFHandler<dim>::active_cell_iterator cell1 = dof_handler.begin_active(),
				endc1= dof_handler.end();
	for(; cell1 != endc1; ++cell1){

		//Just a random check, can be deleted
		if(cell_info_vector[cell_itr1].quad_rule == 0){
			std::cout<<cell_itr1<<"  as you can see"<<std::endl;
			exit(0);
		}
		QGauss<dim> quadrature_formula1(cell_info_vector[cell_itr1].quad_rule);
		FEValues<dim> fe_values1(fe,
				quadrature_formula1,
				update_values |
				update_gradients |
				update_quadrature_points |
				update_JxW_values
				);
		fe_values1.reinit(cell1);

		//Stores cell iterators for all neighbors of the current cell
		std::vector<DoFHandler<2>::active_cell_iterator> neighbor_iterators;
		neighbor_iterators.clear();

		//Computing the cell specific filter radius
		double proj_radius = projection.radius * pow(projection.gamma, (double)(cell1->level()));
		double drmin = proj_radius + sqrt(cell1->measure()/2); //added term is the distance from center of square element to the corner

		//Indentifying the density cell which contains the centroid of this FE cell
		typename DoFHandler<dim>::active_cell_iterator density_cell1;
		if (mesh_coupling == true){
			density_cell1 = cell1;
		}
		else{
			density_cell1 = GridTools::find_active_cell_around_point(density_dof_handler, cell1->center());
		}

		//The following function gets the neighbors of the current cell lying within a distance of drmin
		neighbor_iterators.push_back(density_cell1);
		neighbor_search(density_cell1, density_cell1, neighbor_iterators, drmin);

		//std::cout<<"Cell : "<<cell_itr1<<"      No. of neighbors : "<<neighbor_iterators.size()<<std::endl;
		if(neighbor_iterators.size() == 0){
			std::cout<<"Strange condition : NO NEIGHBOR FOUND  for cell : "<<cell_itr1<<std::endl;
		}
		std::vector<Point<dim> > qpoints1 = fe_values1.get_quadrature_points();
		cell_info_vector[cell_itr1].neighbour_cells.clear();
		cell_info_vector[cell_itr1].neighbour_distance.clear();
		cell_info_vector[cell_itr1].neighbour_cell_area.clear();
		cell_info_vector[cell_itr1].neighbour_cells.resize(qpoints1.size());
		cell_info_vector[cell_itr1].neighbour_distance.resize(qpoints1.size());
		cell_info_vector[cell_itr1].neighbour_cell_area.resize(qpoints1.size());

		unsigned int density_cell_itr2;
		typename DoFHandler<2>::active_cell_iterator density_cell2;
		//Iterate over all neighboring cells to check distance with Gauss points
		for(unsigned int ng_itr = 0;  ng_itr < neighbor_iterators.size(); ++ng_itr){
			density_cell2 = neighbor_iterators[ng_itr];
			density_cell_itr2 = density_cell2->user_index() - 1;

			double distance;

			double exfactor1= 1;
			double rmin1;
			rmin1 = proj_radius * exfactor1;
			for(unsigned int q_point1 = 0; q_point1 < qpoints1.size(); ++q_point1){
					distance  = 0.0;
					distance = qpoints1[q_point1].distance(density_cell2->center());
					if(distance > rmin1){
						continue;
					}
					cell_info_vector[cell_itr1].neighbour_cells[q_point1].push_back(density_cell_itr2);
					cell_info_vector[cell_itr1].neighbour_distance[q_point1].push_back(distance);
					cell_info_vector[cell_itr1].neighbour_cell_area[q_point1].push_back(density_cell2->measure());
			}
		}

		//std::cout<<cell_itr1<<"    "<<qpoints1.size()<<"   "<<cellprop[cell_itr1].neighbour_cells[0].size()<<std::endl;
		calculate_weights(cell_info_vector,
				cell_itr1,
				proj_radius);
		++cell_itr1;
	}
}

//---------------------------------------------------------------------------------------------------------------
/*
 * This overloaded function is implemented for decoupled mesh with moving design points
 * density_triangulation should not be used in this instance
 *
 */
template <int dim>
void DensityField<dim>::create_neighbors(
		std::vector<CellInfo> &cell_info_vector,
		std::vector<CellInfo> &density_cell_info_vector,
		FESystem<dim> &fe,
		DoFHandler<dim> &dof_handler
		){

	projection_matrix.clear();	//This is the regularization operator

	/*
	 * Clearing the cell_info_vector and initializing it
	 */
	for (unsigned int i = 0; i < cell_info_vector.size(); ++i){
		unsigned int n_qpoints = cell_info_vector[i].n_q_points;
		cell_info_vector[i].neighbour_cells.clear();
		cell_info_vector[i].neighbour_distance.clear();
		cell_info_vector[i].neighbour_cell_area.clear();
		cell_info_vector[i].neighbour_cells.resize(n_qpoints);
		cell_info_vector[i].neighbour_distance.resize(n_qpoints);
		cell_info_vector[i].neighbour_cell_area.resize(n_qpoints);
	}

	/*
	 * Calculating the projection radius for the current design point
	 * Here, we fix the radius w.r.t to the cell size of the initial triangulation
	 * However, this needs to changed in future to be adapted w.r.t refinement in the triangulation
	 */
	typename DoFHandler<dim>::active_cell_iterator cell1 = dof_handler.begin_active();
	double cell_len = sqrt(cell1->measure());

	/*
	 * Iterate over all the density points and checks the neighbor cells in triangulation
	 * iterated over the CellInfo vector for the design points
	 */
	unsigned int no_design_points = density_cell_info_vector.size();
	for (unsigned int i = 0; i < density_cell_info_vector.size(); i++){

		//For storing the cell iterators for all neighbor cells in triangulation
		std::vector<DoFHandler<2>::active_cell_iterator> neighbor_iterators;
		neighbor_iterators.clear();

		//Computing the projection radius of density point
		double rmin = density_cell_info_vector[i].projection_fact * cell_len;

		//Identifying the cell in the triangulation around the current density point
		Point<dim> des_pt;
		for (unsigned int k = 0; k < dim; k++)	des_pt[k] = density_cell_info_vector[i].pointX[k];

		cell1 = GridTools::find_active_cell_around_point(dof_handler, des_pt);
		double drmin = rmin + sqrt(cell1->measure()/2);	//for making sure all the cells are covered

		//Getting the neighbors of current cell within a distance of rmin
		neighbor_iterators.push_back(cell1);
		neighbor_search(cell1, cell1, neighbor_iterators, drmin);
		std::cout<<"Density point: "<<i<<"  No. of neighbors : "<<neighbor_iterators.size()<<std::endl;

		//clearing the memory for saving information of the neighbors
		density_cell_info_vector[i].neighbour_cells.clear();
		density_cell_info_vector[i].neighbour_distance.clear();
		density_cell_info_vector[i].neighbour_cell_area.clear();

		//initializing the size of above vectors
		density_cell_info_vector[i].neighbour_cells.resize(1);
		density_cell_info_vector[i].neighbour_distance.resize(1);
		density_cell_info_vector[i].neighbour_cell_area.resize(1);	//1 since only one design point stored in one density_cell

		//Iterating over all the found out neighbor cells
		typename DoFHandler<2>::active_cell_iterator cell2;
		unsigned int cell_itr2;
		for (unsigned int ng_itr = 0; ng_itr < neighbor_iterators.size(); ++ng_itr){
			cell2 = neighbor_iterators[ng_itr];
			cell_itr2 = cell2->user_index() - 1;

			QGauss<dim> quadrature_formula1(cell_info_vector[cell_itr2].quad_rule);
			FEValues<dim> fe_values2(fe,
					quadrature_formula1,
					update_values |
					update_gradients |
					update_quadrature_points |
					update_JxW_values
					);
			fe_values2.reinit(cell2);
			std::vector<Point<dim> > qpoints2 = fe_values2.get_quadrature_points();	//Getting the quad points for the current neighbor cell

			double distance;
			//Iterating over all the Gauss points of the neighbor cell
			for (unsigned int qpoint2 = 0; qpoint2 < qpoints2.size(); ++qpoint2){
				distance = des_pt.distance(qpoints2[qpoint2]);	//distance of design point from the quad point
				if (distance > rmin){
					continue;
				}
				cell_info_vector[cell_itr2].neighbour_cells[qpoint2].push_back(i);
				cell_info_vector[cell_itr2].neighbour_distance[qpoint2].push_back(distance);
			}


		}
	}

	//Update the weights

/*		calculate_weights(cell_info_vector,
				cell_itr1,
				proj_radius);
		++cell_itr1;*/
}

template <int dim>
void DensityField<dim>::neighbor_search(DoFHandler<2>::active_cell_iterator cell1,
		DoFHandler<2>::active_cell_iterator cell,
		std::vector<DoFHandler<2>::active_cell_iterator> &neighbor_iterators,
		double rmin
		){
	for(unsigned int iface = 0; iface < GeometryInfo<2>::faces_per_cell; ++iface){
		if(cell->at_boundary(iface)) continue;
		if(cell->neighbor(iface)->active()){
			if(cell1->center().distance(cell->neighbor(iface)->center()) < rmin){
				if(find(neighbor_iterators.begin(), neighbor_iterators.end(), cell->neighbor(iface)) == neighbor_iterators.end()){
					neighbor_iterators.push_back(cell->neighbor(iface));
					neighbor_search(cell1, cell->neighbor(iface), neighbor_iterators, rmin);
				}
			}
		}
		else{
			for(unsigned int ichildface = 0; ichildface < cell->face(iface)->n_children(); ++ichildface){
				if(cell1->center().distance(cell->neighbor_child_on_subface(iface, ichildface)->center()) < rmin){
					if(find(neighbor_iterators.begin(), neighbor_iterators.end(), cell->neighbor_child_on_subface(iface, ichildface)) == neighbor_iterators.end()){
						neighbor_iterators.push_back(cell->neighbor_child_on_subface(iface, ichildface));
						neighbor_search(cell1, cell->neighbor_child_on_subface(iface, ichildface), neighbor_iterators, rmin);
					}
				}
			}
		}
	}
}

/*
 * This function calculates weights for the case where the design points cannot move in the domain
 * Currently implemented for only coupled mesh, however, it can be extended to decoupled mesh as well.
 */
template <int dim>
void DensityField<dim>::calculate_weights(std::vector<CellInfo> &cell_info_vector,
		unsigned int cell_itr1,
		double rmin){
	unsigned int n_q_points = cell_info_vector[cell_itr1].neighbour_distance.size();
	cell_info_vector[cell_itr1].neighbour_weights.resize(n_q_points);
	for(unsigned int qpoint = 0; qpoint < n_q_points; ++qpoint){
		cell_info_vector[cell_itr1].neighbour_weights[qpoint].resize(cell_info_vector[cell_itr1].neighbour_distance[qpoint].size());
		double sum_weights = 0;
		for(unsigned int i = 0 ; i < cell_info_vector[cell_itr1].neighbour_distance[qpoint].size(); ++i){
			double temp1 = rmin - cell_info_vector[cell_itr1].neighbour_distance[qpoint][i];
			double area_factor = cell_info_vector[cell_itr1].neighbour_cell_area[qpoint][i]/max_cell_area;
			temp1 = temp1*area_factor;
			cell_info_vector[cell_itr1].neighbour_weights[qpoint][i] = temp1;
			sum_weights += temp1;
		}

		for(unsigned int i = 0; i < cell_info_vector[cell_itr1].neighbour_weights[qpoint].size(); ++i){
			if(sum_weights == 0){
				std::cerr<<"atop::DensityField:calculate_weights(..) : Divide by zero exception"<<std::endl;
			}
			else{
				//Corresponds to dx
				cell_info_vector[cell_itr1].neighbour_weights[qpoint][i] /= sum_weights;
			}
		}
	}
}

/*
 * This implementation for calculating the weights for the 'movingDesignPoints' approach
 * Unlike the above one, here the weights w.r.t. whole triangulation is calculated at once.
 * It is NOT called again and again, but just ONCE for one iteration of optimization.
 */
template <int dim>
void DensityField<dim>::calculate_weights(std::vector<CellInfo> &cell_info_vector,
		std::vector<CellInfo> &density_cell_info_vector){

	//Iterating over all the cells of the triangulation
	for (unsigned int cell_itr = 0; cell_itr < cell_info_vector.size(); ++cell_itr){
		unsigned int n_q_points = cell_info_vector[cell_itr].n_q_points;
		cell_info_vector[cell_itr].neighbour_weights.resize(n_q_points);

		//Iterating over all the Gauss points of the current cell
		for (unsigned int qpoint = 0; qpoint < n_q_points; ++qpoint){

		}
	}


	unsigned int n_q_points = cell_info_vector[cell_itr1].neighbour_distance.size();
	cell_info_vector[cell_itr1].neighbour_weights.resize(n_q_points);
	for(unsigned int qpoint = 0; qpoint < n_q_points; ++qpoint){
		cell_info_vector[cell_itr1].neighbour_weights[qpoint].resize(cell_info_vector[cell_itr1].neighbour_distance[qpoint].size());
		double sum_weights = 0;
		for(unsigned int i = 0 ; i < cell_info_vector[cell_itr1].neighbour_distance[qpoint].size(); ++i){
			double temp1 = rmin - cell_info_vector[cell_itr1].neighbour_distance[qpoint][i];
			double area_factor = cell_info_vector[cell_itr1].neighbour_cell_area[qpoint][i]/max_cell_area;
			temp1 = temp1*area_factor;
			cell_info_vector[cell_itr1].neighbour_weights[qpoint][i] = temp1;
			sum_weights += temp1;
		}

		for(unsigned int i = 0; i < cell_info_vector[cell_itr1].neighbour_weights[qpoint].size(); ++i){
			if(sum_weights == 0){
				std::cerr<<"atop::DensityField:calculate_weights(..) : Divide by zero exception"<<std::endl;
			}
			else{
				//Corresponds to dx
				cell_info_vector[cell_itr1].neighbour_weights[qpoint][i] /= sum_weights;
			}
		}
	}
}


template <int dim>
void DensityField<dim>::smoothing(
		std::vector<CellInfo> &cell_info_vector,
		std::vector<CellInfo> &density_cell_info_vector
		){
	unsigned int no_cells = cell_info_vector.size();
	for(unsigned int cell_itr = 0 ; cell_itr < no_cells; ++cell_itr){
		for(unsigned int qpoint = 0 ; qpoint < cell_info_vector[cell_itr].neighbour_cells.size(); ++qpoint){
			double xPhys = 0.0;
			unsigned int density_cell_itr2;
			for(unsigned int i = 0; i < cell_info_vector[cell_itr].neighbour_weights[qpoint].size(); ++i){
				density_cell_itr2 = cell_info_vector[cell_itr].neighbour_cells[qpoint][i];
				xPhys += cell_info_vector[cell_itr].neighbour_weights[qpoint][i]
						  * density_cell_info_vector[density_cell_itr2].density[0];

			}
			cell_info_vector[cell_itr].density[qpoint] = xPhys;
		}
	}
}

/**
 * This function updates the design_vector
 * Design_vector is used for for the optimization purpose
 */
template <int dim>
void DensityField<dim>::update_design_vector(
		std::vector<CellInfo> &density_cell_info_vector,
		std::vector<double> &design_vector,
		unsigned int cycle,
		double volfrac,
		DefineMesh<dim> &mesh,
		Projection &projection){

	design_vector.clear();
	unsigned int cell_count = density_cell_info_vector.size();

	//Update the design vector

	/*
	 * This is a case where the design points are decoupled and they actually do not form a mesh.
	 * For convenience it is implemented as a separate mesh, however, there is only one point per mesh.
	 * No quadrature sort of implementation exists for the design mesh for such a case.
	 * In the worst implementation, q = 1 point might be assumed for quadrature, however, that should be avoided.
	 */
	if (mesh.coupling == false && mesh.adaptivityType == "movingdesignpoints"){

		if (cycle == 0){
			design_vector.resize(cell_count * mesh.design_var_per_point());

			typename Triangulation<dim>::active_cell_iterator cell = mesh.triangulation->begin_active(),
						endc = mesh.triangulation->end();

			for (unsigned int i = 0; i < design_vector.size();){
				design_vector[i] = volfrac; //adding the density for the current design point
				i++;
				design_vector[i] = projection.fact; //Adding the projection radius factor
				i++;
				// initializing the dim no. of coordinates for the location of the design point
				for (unsigned int j = 0; j < dim; j++){
					design_vector[i] = cell->center()[j];
					i++;
				}
				cell++;

			}
		}
		else{
			design_vector.clear();
			unsigned int k = 0; //iterate over the whole design vector
			for (unsigned int i = 0; i < cell_count; ++i){
				design_vector.push_back(density_cell_info_vector[i].density[0]);	//adding the density value
				design_vector.push_back(density_cell_info_vector[i].projection_radius);		//adding rmin value for the cell
				for(unsigned int j = 0; j < density_cell_info_vector[i].pointX.size(); ++j){
					//adding all the components of dim coordinates for the location
					design_vector.push_back(density_cell_info_vector[i].pointX[j]);
				}
			}

		}
	}
	/*
	 * Below is the case of a coupled mesh where the same element is used for analysis as well design.
	 * For clarity purpose two different meshes are used. However, a one-one correlation exists between
	 * elements of the 2 meshes.
	 */
	else{
		if (cycle == 0){
			design_vector.resize(cell_count, volfrac);
		}
		else{
			for(unsigned int i = 0; i < cell_count; ++i){
				for(unsigned int j = 0; j < density_cell_info_vector[i].density.size(); ++j){
					design_vector.push_back(density_cell_info_vector[i].density[j]);
				}
			}
		}
	}
}

/*
 * This function is used to update the values of the design bounds for different types of adaptive methods.
 * For the case of only density design bounds, it will be straightforward.
 */
template <int dim>
void DensityField<dim>::update_design_bounds(
		std::vector<double> &lb,
		std::vector<double> &ub,
		DefineMesh<dim> &mesh,
		Projection &projection){

	if (mesh.coupling == false && mesh.adaptivityType == "movingdesignpoints"){
		unsigned int no_cells = mesh.triangulation->n_active_cells();	// No of design points in the domain
		//This case assumes only one design points exists with respect to every finite element in the start of MTO
		unsigned int design_count = no_cells * mesh.design_var_per_point();	//Total number of design variables for optimization

		lb.resize(design_count);
		ub.resize(design_count);	//setting the sizes of the bound vectors

		unsigned int k = 0;	//iterating over all design variables

		for (unsigned int i = 0; i < no_cells; ++i){

			lb[k] = 0;	//density value
			ub[k] = 1;	//density value
			k++;
			lb[k] = projection.minFact;	//minimum projection factor (elem size)
			ub[k] = projection.maxFact;	//maximum projection factor (elem size)
			k++;

			// updating the location bounds for the dim dimensions
			for (unsigned int j = 0; j < dim; ++j){
				lb[k] = mesh.coordinates[j][0];
				ub[k] = mesh.coordinates[j][1];
				k++;
			}
		}

	}
	else{

		//in this case the number of design variables is equal to the number of cells in the
		//density_trinagulation mesh
		unsigned int design_count = mesh.density_triangulation->n_active_cells();
		lb.resize(design_count, 0.0);
		ub.resize(design_count, 1.0);
	}

}

template <int dim>
double DensityField<dim>::get_dxPhys_dx(CellInfo &cell_info,
		unsigned int q_point,
		unsigned int density_cell_itr2){
	unsigned int n_cell;
	for(unsigned int i = 0 ; i < cell_info.neighbour_cells[q_point].size(); ++i){
		n_cell = cell_info.neighbour_cells[q_point][i];
		if(n_cell == density_cell_itr2){
			double output = cell_info.neighbour_weights[q_point][i];
			return output;
		}
	}
	return 0;
}

template <int dim>
double DensityField<dim>::get_vol_fraction(
		std::vector<CellInfo> &cell_info_vector
		){
	double volume = 0.0;
	for(unsigned int i = 0; i < cell_info_vector.size(); ++i){

		cell_info_vector[i].cell_density = 0.0;
		if(cell_info_vector[i].density_weights.size() == 0)
			std::cout<<"ERRORRRRRRRR! no quad point here "<<std::endl;
		for(unsigned int qpoint = 0; qpoint < cell_info_vector[i].density_weights.size(); ++qpoint){
			cell_info_vector[i].cell_density += cell_info_vector[i].density_weights[qpoint] * cell_info_vector[i].density[qpoint];
		}
		double area_fraction = cell_info_vector[i].cell_area / max_cell_area;
		volume += (cell_info_vector[i].cell_density * area_fraction);
	}
	volume /= initial_no_cells;
	//std::cout<<"Volume fraction: "<<volume<<std::endl;
	return volume;
}

template <int dim>
void DensityField<dim>::update_density_cell_info_vector(
		std::vector<CellInfo> &density_cell_info_vector,
		const std::vector<double> &design_vector){
	//std::cout<<density_cell_info_vector.size()<<"..........."<<design_vector.size()<<std::endl;
	unsigned int cell_count = density_cell_info_vector.size();
	unsigned int design_count = 0;
	for(unsigned int i = 0; i < cell_count; ++i){
		for(unsigned int j = 0; j < density_cell_info_vector[i].density.size(); ++j){
			density_cell_info_vector[i].density[j] = design_vector[design_count];
			++design_count;
		}
	}

}
