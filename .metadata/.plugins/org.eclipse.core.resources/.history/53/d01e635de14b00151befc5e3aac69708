/*
 *
 *  Created on: Aug 22, 2015
 *      Author: Deepak K. Gupta
 *  
 */

#include <atop/TopologyOptimization/adaptivity.h>
#include <atop/TopologyOptimization/cell_prop.h>
#include <atop/physics/elasticity.h>
#include <atop/fem/define_mesh.h>

#include <deal.II/grid/grid_generator.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/grid/tria_iterator.h>
#include <deal.II/grid/grid_out.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_accessor.h>
#include <deal.II/dofs/dof_tools.h>
#include <deal.II/grid/tria.h>

using namespace atop;
using namespace dealii;

template <int dim>
void Adaptivity<dim>::update(
		FEM<dim> &obj_fem){

	//Assigning the FEM object
	this->fem = &obj_fem;
	this->cell_info_vector = fem->cell_info_vector;
	this->density_cell_info_vector = fem->density_cell_info_vector;

	//Run the mesh adaptivity approach
	mesh_refine_indicator(fem->mesh->adaptivityType);


	//Run projection adaptivity


	//Run penalization continuation


}

/**
 * This function chooses the right algorithm based on the provided
 * string to adaptively refine the FE mesh based on some density
 * criteria.
 */
template <int dim>
void Adaptivity<dim>::mesh_refine_indicator(
		std::string &update_str){

	if(update_str == "adaptive_grayness"){
		if(fem->mesh->coupling == true){
			coupled_refine_adaptive_grayness();
		}

	}
}

template <int dim>
void Adaptivity<dim>::coupled_refine_adaptive_grayness(){

	//Getting the cycle number for refinement
	unsigned int cycle = fem->cycle;

	double rhomin = 0.0;
	double rhomax = 1.0;
	double rhomid = (rhomax + rhomin)/2;
	double alpha = 0.2;
	double beta = 1.2;

	double refine_lbound = rhomin + ((1 - alpha) * rhomid * exp(-beta * (double)(cycle+1)));
	double refine_ubound = rhomax - ((1 - alpha) * rhomid * exp(-beta * (double)(cycle+1)));
	double coarsen_lbound = rhomin + (alpha * rhomid * exp(-beta * (double)(cycle+1)));
	double coarsen_ubound = rhomax - (alpha * rhomid * exp(-beta * (double)(cycle+1)));

	typename Triangulation<dim>::active_cell_iterator cell = fem->triangulation->begin_active(),
			endc = fem->triangulation->end();

	typename Triangulation<dim>::active_cell_iterator density_cell = fem->density_triangulation->begin_active(),
			density_endc = fem->density_triangulation->end();

	unsigned int cell_itr = 0;

	for(; cell != endc; ++cell, ++density_cell){

		unsigned int n_qpoints = (*cell_info_vector)[cell_itr].density.size();
		double density = 0.0;

		for(unsigned int qpoint = 0; qpoint < n_qpoints; ++qpoint){
			density += (*cell_info_vector)[cell_itr].density[qpoint] *
								(*cell_info_vector)[cell_itr].density_weights[qpoint];

		}
		if(density > coarsen_ubound || density < coarsen_lbound){
			cell->set_coarsen_flag();
			density_cell->set_coarsen_flag();
		}
		else if (density > refine_lbound && density < refine_ubound) {
			cell->set_refine_flag();
			density_cell->set_refine_flag();
		}
		++cell_itr;
	}
}

template <int dim>
void Adaptivity<dim>::update_cell_vectors(
		std::vector<CellInfo> &cell_info_vector,
		std::vector<CellInfo> &density_cell_info_vector,
		DoFHandler<dim> &dof_handler,
		DoFHandler<dim> &density_dof_handler,
		Triangulation<dim> &density_triangulation,
		FESystem<dim> &density_fe){
	std::cout<<"Updating cell properties record"<<std::endl;
	std::vector<CellInfo> temp_cellprop;
	temp_cellprop.clear();
	temp_cellprop = density_cell_info_vector;
	density_cell_info_vector.clear();
	density_cell_info_vector.resize(density_triangulation.n_active_cells());
	unsigned int density_cell_itr = 0;
	typename DoFHandler<dim>::active_cell_iterator density_cell = density_dof_handler.begin_active(),
			endc = density_dof_handler.end();
	for(; density_cell != endc; ++density_cell){
		if(density_cell->level() > 0 && density_cell->parent()->user_index() > 0){
			density_cell_info_vector[density_cell_itr] = temp_cellprop[density_cell->parent()->user_index() - 1];
			QGauss<dim> qformula_child(density_cell_info_vector[density_cell_itr].quad_rule);
			FEValues<dim> fevalues_child(density_fe,
					qformula_child,
					update_values |
					update_gradients |
					update_quadrature_points |
					update_JxW_values
					);

			QGauss<dim> qformula_parent(density_cell_info_vector[density_cell_itr].quadrature_formula);
			FEValues<dim> fevalues_parent(fe,
					qformula_child,
					update_values |
					update_gradients |
					update_quadrature_points |
					update_JxW_values
					);
			unsigned int no_q_points = cellprop[cell_itr].material_density.size();
			fevalues_child.reinit(cell);
			std::vector<Point<dim> > child_qpoints = fevalues_child.get_quadrature_points();
			fevalues_parent.reinit(cell->parent());
			std::vector<Point <dim> > parent_qpoints = fevalues_parent.get_quadrature_points();
			for(unsigned int qchild = 0; qchild < no_q_points; ++qchild){
				double dmin = 99999;
				Point<dim> p_child = child_qpoints[qchild];
				for(unsigned int qparent = 0; qparent < no_q_points; ++qparent){
					Point<dim> p_parent = parent_qpoints[qparent];
					if(p_parent.distance(p_child) >= dmin){
						continue;
					}
					cellprop[cell_itr].material_density[qchild] = temp_cellprop[cell->parent()->user_index() - 1].material_density[qparent];
					dmin = p_parent.distance(p_child);
				}
			}
		}

		if(cell->user_index() > 0){
			cellprop[cell_itr] = temp_cellprop[cell->user_index() - 1];
		}
		cellprop[cell_itr].cell_area = cell->measure();
		cellprop[cell_itr].neighbour_cells.clear();
		cellprop[cell_itr].neighbour_distance.clear();
		cellprop[cell_itr].neighbour_weights.clear();
		++cell_itr;
	}

		//clearing temp_cellprop
		temp_cellprop.clear();

	//Clearing the user_index for all cells
	cell = dof_handler.begin_active(),
			endc = dof_handler.end();
	cell_itr = 0;
	for(; cell != endc; ++cell){
		if(cell->level() > 0 && cell->parent()->user_index() > 0){
			cell->parent()->clear_user_index();
		}
		if(cell->user_index() > 0){
			cell->clear_user_index();
		}
	}
}
