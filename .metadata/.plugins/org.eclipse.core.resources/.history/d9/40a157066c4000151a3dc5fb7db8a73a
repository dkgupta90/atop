/*
 *
 *  Created on: Jun 18, 2015
 *      Author: Deepak K. Gupta
 *  
 */

#include <string>
#include <iostream>
#include <atop/fem/fem.h>
#include <atop/TopologyOptimization/cell_prop.h>
#include <atop/TopologyOptimization/penalization.h>
#include <deal.II/fe/fe_q.h>
#include <deal.II/fe/fe_dgq.h>
#include <atop/fem/define_mesh.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_accessor.h>
#include <deal.II/fe/fe_system.h>
#include <deal.II/grid/tria.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/grid/tria_iterator.h>
#include <deal.II/lac/constraint_matrix.h>
#include <deal.II/base/quadrature_lib.h>


#include<vector>




using namespace atop;
using namespace dealii;

//Constructor for initialization
template<int dim>
FEM<dim>::FEM(
		Triangulation<dim> &triangulation,
		Triangulation<dim> &density_triangulation,
		DoFHandler<dim> &dof_handler,
		DoFHandler<dim> &density_dof_handler,
		std::vector<CellInfo> &cell_info_vector,
		std::vector<CellInfo> &density_cell_info_vector,
		DefineMesh<dim> &obj_mesh){

	this->dof_handler = &dof_handler;
	this->density_dof_handler = &density_dof_handler;
	this->cell_info_vector = &cell_info_vector;
	this->density_cell_info_vector = &density_cell_info_vector;

	this->mesh = &obj_mesh;
	//Choosing the types of elements for FE mesh
	if(obj_mesh.elementType == "FE_Q"){
		fe = new FESystem<dim>(FE_Q<dim>(mesh->el_order), dim);
	}

	//Choosing the type of element for density mesh
	if(obj_mesh.density_elementType == "FE_DGQ"){
		density_fe = new FESystem<dim>(FE_DGQ<dim>(mesh->el_order), 1);
	}

}

template <int dim>
FEM<dim>::~FEM(){
	delete dof_handler, density_dof_handler, fe, density_fe;
}

//Function that step-by-step solves the FE problem
template <int dim>
void FEM<dim>::solve(){
	//Setting up the Fe system

	itr_count++;	//Iterating the counter for the no. of iterations
	setup_system();
	assemble_system();
}

//Function for setting up the FE system
template <int dim>
void FEM<dim>::setup_system(){

	//FE mesh
	dof_handler->distribute_dofs(*fe);
	hanging_node_constraints.clear();
	DoFTools::make_hanging_node_constraints(*dof_handler,
			hanging_node_constraints);
	hanging_node_constraints.close();
	sparsity_pattern.reinit(dof_handler->n_dofs(),
			dof_handler->n_dofs(),
			dof_handler->max_couplings_between_boundary_dofs());
	DoFTools::make_sparsity_pattern(*dof_handler,
			sparsity_pattern);
	hanging_node_constraints.condense(sparsity_pattern);
	sparsity_pattern.compress();
	system_matrix.reinit(sparsity_pattern);
	solution.reinit(dof_handler->n_dofs());
	system_rhs.reinit(dof_handler->n_dofs());

	//Density mesh
	density_dof_handler->distribute_dofs(*density_fe);
	nodal_density.reinit(density_dof_handler->n_dofs());
}

/**
 * This function assembles the contributions from each element.
 * It creates the system matrix and the global RHS
 */
template <int dim>
void FEM<dim>::assemble_system(){
	std::cout<<"Assembling the system ..."<<std::endl;

	//Initialize cell_info and density_cell_info objects
	if(cycle == 0 && itr_count == 0){
		reset();	//Initializes the variables and vectors
	}

	//Initialize the components of every cycle
	if (itr_count == 0){
		initialize_cycle();
	}

	//Apply smoothing operation on the density values
	density_field.smoothing(*cell_info_vector, *density_cell_info_vector);

	//Updating the physics of the problem
	update_physics();

	//Compute cellwise material properties
	penal->update_param(linear_elastic->E, *cell_info_vector);

	//Assembling the system and RHS
	assembly();

}

template<int dim>
void FEM<dim>::problemType(LinearElastic<dim> &obj_linear_elastic){
	this->linear_elastic = &obj_linear_elastic;
}

template<int dim>
void FEM<dim>::projectionType(Projection &projection){
	this->projection = &projection;
}

template <int dim>
void FEM<dim>::penalization(Penalize &obj_penal){
	this->penal = &obj_penal;
}

template <int dim>
void FEM<dim>::reset(){
	//initializing the current and running quad rules
	current_quad_rule = 2;
	running_quad_rule = 2;

	elastic_data.current_quad_rule = current_quad_rule;
	elastic_data.running_quad_rule = running_quad_rule;
	//current_quad_rule  will be updated on adaptivity in quadrature

	//Initializing the quadrature rule for all the elements
	QGauss<2> temp_quad(current_quad_rule);

	elastic_data.nu = linear_elastic->poisson;

	/**
	 * Initialize the cell parameters for all the FE cells
	 */
	for(std::vector<CellInfo>::iterator cell_info_itr = cell_info_vector->begin();
			cell_info_itr != cell_info_vector->end();
			++cell_info_itr){
		(*cell_info_itr).quad_rule = current_quad_rule;
		QGauss<dim> temp_quad(current_quad_rule);
		(*cell_info_itr).n_q_points = temp_quad.size();
		(*cell_info_itr).cell_area = 0.00001;
		(*cell_info_itr).density.resize((*cell_info_itr).n_q_points, 0.01);
	}

	//Initialize the density cell parameters for all the density cells
	for(std::vector<CellInfo>::iterator density_info_itr = density_cell_info_vector->begin();
			density_info_itr != density_cell_info_vector->end();
			++density_info_itr){

		//Setting the density quad rule to 1
		(*density_info_itr).quad_rule = 1;
		(*density_info_itr).n_q_points = 1; //	located at the centroid
		(*density_info_itr).cell_area = 0.00001;	//area of the density cell
		(*density_info_itr).density.resize((*density_info_itr).n_q_points, volfrac);
	}

	/**
	 * Link the cell_info_vector to the FE triangulation
	 * user_index is 1, 2, 3.......
	 */
	typename DoFHandler<dim>::active_cell_iterator cell = dof_handler->begin_active(),
			endc = dof_handler->end();
	unsigned int cell_itr = 0;
	for(; cell != endc; ++cell){
		cell->set_user_index(cell_itr + 1);
		(*cell_info_vector)[cell_itr].cell_area = cell->measure(); //defining cell area
		++cell_itr;
	}

	/**
	 * Link the density_cell_info_vector to the density triangulation
	 * user index is 1, 2, 3, ...
	 */
	typename DoFHandler<dim>::active_cell_iterator density_cell = density_dof_handler->begin_active(),
			density_endc = density_dof_handler->end();
	unsigned int density_cell_itr = 0;
	for(; density_cell != density_endc; ++density_cell){
		density_cell->set_user_index(density_cell_itr + 1);
		(*density_cell_info_vector)[density_cell_itr].cell_area = density_cell->measure();
		++density_cell_itr;
	}

	//Setting the max_cell_area
	--cell;
	density_field.max_cell_area = cell->measure();
}

template <int dim>
void FEM<dim>::initialize_cycle(){
	double time1 = clock();
	std::cout<<"Looking for neighbours;   ";
	density_field.create_neighbors(
			*cell_info_vector,
			*fe,
			*density_fe,
			*dof_handler,
			*density_dof_handler,
			*projection);
	double time2 = clock();
	time2 = (time2 - time1)/(double)CLOCKS_PER_SEC;
	std::cout<<"Neighbours' indices stored : time taken = "<<time2<<" seconds"<<std::endl;

}

template <int dim>
void FEM<dim>::update_physics(){

	//update the B and d matrices for linear elastic problem
	if(linear_elastic){
		elastic_data.update_elastic_matrices(*fe, *dof_handler);
	}
}

template <int dim>
void FEM<dim>::assembly(){
	const unsigned int dofs_per_cell = fe->dofs_per_cell;
	const unsigned int density_per_cell = density_fe->dofs_per_cell;

	FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
	FullMatrix<double> normalized_matrix(dofs_per_cell, dofs_per_cell);

	Vector<double> cell_rhs(dofs_per_cell);
	Vector<double> cell_density(density_per_cell);

	std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);
	std::vector<types::global_dof_index> local_density_indices(density_per_cell);

	//Iterators for the FE mesh
	typename DoFHandler<dim>::active_cell_iterator cell = dof_handler->begin_active(),
			endc = dof_handler->end();
	unsigned int cell_itr = 0;

	//Iterators for the density mesh
	typename DoFHandler<dim>::active_cell_iterator density_cell = density_dof_handler->begin_active(),
			density_endc = density_dof_handler->end();
	unsigned int density_itr = 0;

	for (; cell != endc; ++cell){
		cell_matrix = 0;
		cell_rhs = 0;
		cell_density = 0;
		QGauss<dim> quadrature_formula((*cell_info_vector)[cell_itr].quad_rule);
		FEValues<dim> fe_values(*fe,
				quadrature_formula,
				update_values |
				update_gradients |
				update_quadrature_points |
				update_JxW_values
				);

		fe_values.reinit(cell);
		unsigned int n_q_points = quadrature_formula.size(); //No. of integration points

		//Add source function to the right hand side
		std::vector<Vector<double>> rhs_values(n_q_points,
				Vector<double>(dim));
		add_source_to_rhs(fe_values.get_quadrature_points(),
				rhs_values);

		double total_weight = 0.0;
		for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
			unsigned int quad_index = elastic_data.get_quad_index(cellprop[cell_itr].quadrature_formula);
			normalized_matrix = elastic_data.elem_stiffness_array[quad_index][q_point];
			cell_matrix.add(cellprop[cell_itr].E_values[q_point],
					normalized_matrix);

			total_weight += fe_values.JxW(q_point);
		}
		for(unsigned int i = 0; i < dofs_per_cell; ++i){
			const unsigned int component_i = fe.system_to_component_index(i).first;
			for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
				cell_rhs(i) += fe_values.shape_value(i, q_point) *
						rhs_values[q_point](component_i) *
						fe_values.JxW(q_point);
			}
		}
		cell->get_dof_indices(local_dof_indices);

		for(unsigned int i = 0; i < dofs_per_cell; ++i){
			for(unsigned int j = 0; j < dofs_per_cell; ++j){
				system_matrix.add(local_dof_indices[i],
						local_dof_indices[j],
						cell_matrix(i, j));
			}
			system_rhs(local_dof_indices[i]) += cell_rhs(i);
		}
		density_cell->get_dof_indices(local_density_indices);
		for(unsigned int i = 0; i < density_per_cell; ++i){
			for(unsigned int q_point = 0 ; q_point < n_q_points; ++q_point){
				cell_density(i) += 	cellprop[cell_itr].xPhys[q_point] *
						(fe_values.JxW(q_point)/total_weight);
			}
			nodal_density(local_density_indices[i]) += cell_density(i);
		}
		++density_cell;
		++cell_itr;
	}
	rho_values.update_density_mesh(cellprop,
			density_mesh);
	hanging_node_constraints.condense(system_matrix);
	hanging_node_constraints.condense(system_rhs);

	std::map<types::global_dof_index, double> boundary_values;
	VectorTools::interpolate_boundary_values(dof_handler,
			42,
			BoundaryValues<dim>(),
			boundary_values);
	MatrixTools::apply_boundary_values(boundary_values,
			system_matrix,
			solution,
			system_rhs);

	//Add point-source function to the right hand side
	const Point<dim> load_point(xmax, (ymax+ymin)/2);
	const Point<dim> load(0, -1);
	VectorTools::create_point_source_vector(dof_handler, load_point, load, system_rhs);
}

template <int dim>
void FEM<dim>::add_source_to_rhs(
		std::vector<Point<dim> > &points,
		std::vector<Vector<double> > &value_list){
	Assert (value_list.size() == points.size(),
			ExcDimensionMismatch(value_list.size(), points.size()));
	const unsigned int n_points = points.size();

	for (unsigned int p = 0; p < n_points; ++p){
		std::vector<double> x;
		x.resize(dim);
		for(unsigned int i = 0; i < dim; ++i)
			x[i] = points[p](i);
		x = mesh->source_fn(x);
		Assert(x.size() == dim,
				ExcDimensionMismatch(x.size(), dim));
		for(unsigned int i = 0; i < dim; ++i)
			value_list[p](i) = x[i];
	}
}

template <int dim>
void FEM<dim>::add_point_source_to_rhs(){
	unsigned int no_sources = (mesh->point_source_vector).size();
	for(unsigned int s = 0; s < no_sources; ++s){
		std::vector<double> load_point = mesh->point_source_vector.first;
		std::vector<double> load = mesh->point_source_vector.second;
		Assert (load_point.size() == dim,
				ExcDimensionMismatch(load_point.size(), dim));
		Assert (load.size() == dim,
				ExcDimensionMismatch(load.size(), dim));
	}
}
