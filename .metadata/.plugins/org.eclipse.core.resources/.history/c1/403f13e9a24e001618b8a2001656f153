/*
 *
 *  Created on: Jun 18, 2015
 *      Author: Deepak K. Gupta
 *  
 */

#include <string>
#include <iostream>
#include <atop/fem/fem.h>
#include <atop/TopologyOptimization/cell_prop.h>
#include <atop/TopologyOptimization/penalization.h>
#include <atop/fem/boundary_values.h>
#include <atop/fem/output.h>
#include <deal.II/fe/fe_q.h>
#include <deal.II/fe/fe_dgq.h>
#include <deal.II/fe/fe_q_hierarchical.h>
#include <atop/fem/define_mesh.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_accessor.h>
#include <deal.II/fe/fe_system.h>
#include <deal.II/grid/tria.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/grid/tria_iterator.h>
#include <deal.II/grid/tria_boundary_lib.h>
#include <deal.II/lac/constraint_matrix.h>
#include <deal.II/base/quadrature_lib.h>
#include <deal.II/base/function.h>
#include <deal.II/grid/grid_tools.h>
#include <deal.II/base/geometry_info.h>
#include <deal.II/lac/sparse_direct.h>
#include <deal.II/hp/fe_collection.h>
#include <deal.II/hp/fe_values.h>
#include <deal.II/hp/dof_handler.h>



#include<vector>




using namespace atop;
using namespace dealii;

//Constructor for initialization
template<int dim>
FEM<dim>::FEM(
		Triangulation<dim> &obj_triangulation,
		Triangulation<dim> &obj_analysis_density_triang,
		Triangulation<dim> &obj_design_triangulation,
		hp::DoFHandler<dim> &dof_handler,
		hp::DoFHandler<dim> &analysis_density_handler,
		hp::DoFHandler<dim> &design_handler,
		std::vector<CellInfo> &cell_info_vector,
		std::vector<CellInfo> &density_cell_info_vector,
		DefineMesh<dim> &obj_mesh,
		std::vector<double> &obj_design_vector){

	this->cell_info_vector = &cell_info_vector;
	this->density_cell_info_vector = &density_cell_info_vector;
	this->mesh = &obj_mesh;
	this->dof_handler = &dof_handler;	// for the state field on the analysis
	this->analysis_density_handler = &analysis_density_handler;	// for the filtered density field
	this->triangulation = &obj_triangulation;	//for the state field on the analysis
	this->analysis_density_triangulation = &obj_analysis_density_triang;	//for the filtered density

	//For Lagrange element
	if (mesh->amrType == "FE_Q"){
		for (unsigned int degree = 1; degree <= mesh->max_el_order; ++degree){
			fe_collection.push_back(FESystem<dim>(FE_Q<dim>(mesh->max_el_order), dim));
		}
	}

	//For Legendre elements
	if (mesh->amrType == "FE_Q"){
		for (unsigned int degree = 1; degree <= mesh->max_el_order; ++degree){
			fe_collection.push_back(FESystem<dim>(FE_Q<dim>(mesh->max_el_order), dim));
		}
	}

	//Choosing the types of elements for initial FE mesh
	if (mesh->amrType == "dp-refinement"){
		if (obj_mesh.elementType == "FE_Q"){
			for (unsigned int degree = 1; degree <= 6; ++degree){
				fe_collection.push_back(FE_Q<dim>(degree), dim);
			}
		}
	}
	else{
		if(obj_mesh.elementType == "FE_Q"){
			fe = new FESystem<dim>(FE_Q<dim>(mesh->el_order), dim);
			fe_analysis_density = new FESystem<dim>(FE_DGQ<dim>(mesh->density_el_order), 1);
		}
		if(obj_mesh.elementType == "FE_Q_hierarchical"){
			fe = new FESystem<dim>(FE_Q_Hierarchical<dim>(mesh->el_order), dim);
			fe_analysis_density = new FESystem<dim>(FE_DGQ<dim>(mesh->el_order), 1);
		}
	}


	this->design_handler = &design_handler;	// for the design field
	this->design_triangulation = &obj_design_triangulation;	// for the design domain

	//Choosing the type of element for density mesh
	//Information below is used to create the density field which will be output as the design.
	if(obj_mesh.density_elementType == "FE_DGQ"){
		fe_design = new FESystem<dim>(FE_DGQ<dim>(mesh->el_order), 1);
	}
	else{
		fe_design = new FESystem<dim>(FE_DGQ<dim>(mesh->el_order), 1);
	}


	this->design_vector = &obj_design_vector;

}

template <int dim>
FEM<dim>::~FEM(){
	delete dof_handler, analysis_density_handler, design_handler;
	delete fe, fe_analysis_density, fe_design;
}

//Function that step-by-step solves the FE problem
template <int dim>
void FEM<dim>::analyze(){
	//std::cout<<"Entered FEM::analyze()"<<std::endl;
	//Setting up and assembling the Fe system

	itr_count++;	//Iterating the counter for the no. of iterations
	clean_trash();
	boundary_info();
	setup_system();
	assemble_system();
	//std::cout<<"System assembled"<<std::endl;
	solve();	//Solving the system
	//std::cout<<"System solved"<<std::endl;
	output_results();

}

//Function for setting up the FE system
template <int dim>
void FEM<dim>::setup_system(){

	std::cout<<"Entered FEM::setup_system()"<<std::endl;
	//FE mesh
	dof_handler->distribute_dofs(*fe);
	analysis_density_handler->distribute_dofs(*fe_analysis_density);	//Used to add density on every node

	//Density mesh or design mesh
	design_handler->distribute_dofs(*fe_design);

	hanging_node_constraints.clear();
	DoFTools::make_hanging_node_constraints(*dof_handler,
			hanging_node_constraints);
	hanging_node_constraints.close();
	sparsity_pattern.reinit(dof_handler->n_dofs(),
			dof_handler->n_dofs(),
			dof_handler->max_couplings_between_dofs());
	DoFTools::make_sparsity_pattern(*dof_handler,
			sparsity_pattern);
	hanging_node_constraints.condense(sparsity_pattern);
	sparsity_pattern.compress();
	system_matrix.reinit(sparsity_pattern);
		solution.reinit(dof_handler->n_dofs());
		system_rhs.reinit(dof_handler->n_dofs());
	nodal_density.reinit(analysis_density_handler->n_dofs());	//filtered densities for the output
	cells_adjacent_per_node.reinit(analysis_density_handler->n_dofs());	//for normalizing the nodal density value



}

/**
 * This function assembles the contributions from each element.
 * It creates the system matrix and the global RHS
 */
template <int dim>
void FEM<dim>::assemble_system(){
	std::cout<<"Assembling the system..."<<std::endl;

	//Initialize cell_info and density_cell_info objects
	if(cycle == 0 && itr_count == 0){
		reset();	//Initializes the variables and vectors
	}

	//updating the density_cell_info vector with the new design
	if (itr_count != -1){
		//Update the density_cell_info_vector
		if (mesh->coupling == false && mesh->adaptivityType != "movingdesignpoints"){
			density_field.update_density_cell_info_vector(
					*cell_info_vector,
					*density_cell_info_vector,
					*design_vector);
		}
		else{
			density_field.update_density_cell_info_vector(
					*density_cell_info_vector,
					*design_vector);
		}
	}

	//Initialize the components of every cycle
	if (itr_count == 0){
		initialize_cycle();
	}
	else{
		//For approaches, where neighbors need to be computed at every iteration
		if (mesh->coupling == false && mesh->adaptivityType == "movingdesignpoints"){
			std::cout<<"Updating neighbors"<<std::endl;
			density_field.create_neighbors(
					*cell_info_vector,
					*density_cell_info_vector,
					*fe,
					*dof_handler);
		}
	}

	//Apply smoothing operation on the density values
	density_field.smoothing(*cell_info_vector,
			*density_cell_info_vector,
			*mesh);
	std::cout<<"Smoothing done"<<std::endl;

	//Updating the physics of the problem
	update_physics();
	std::cout<<"Physics updated"<<std::endl;

	//Compute cellwise material properties
	penal->update_param(linear_elastic->E, *cell_info_vector);
	std::cout<<"Cell parameters updated"<<std::endl;

	//Assembling the system and RHS
	assembly();
	std::cout<<"Assembly finished"<<std::endl;

}

template<int dim>
void FEM<dim>::problemType(LinearElastic<dim> &obj_linear_elastic){
	this->linear_elastic = &obj_linear_elastic;
}

template<int dim>
void FEM<dim>::projectionType(Projection &projection){
	this->projection = &projection;
}

template <int dim>
void FEM<dim>::penalization(Penalize &obj_penal){
	this->penal = &obj_penal;
}

template <int dim>
void FEM<dim>::solve(){

/*	SolverControl solver_control(50000, 1e-10);
	SolverCG<> cg(solver_control);
	PreconditionSSOR<> preconditioner;
	preconditioner.initialize(system_matrix, 1.5);
	cg.solve(system_matrix,
			solution,
			system_rhs,
			preconditioner);*/

	SparseDirectUMFPACK  A_direct;
	A_direct.initialize(system_matrix);
	A_direct.vmult (solution, system_rhs);

	hanging_node_constraints.distribute(solution);


}

template <int dim>
void FEM<dim>::output_results(){

	//Writing the state solution
	std::string filename = "solution-";
	std::stringstream ss;
	ss<< cycle +1<<"_"<<itr_count+1;
	filename += ss.str();
	filename += ".vtk";
	std::vector<std::string> solution_names;
	solution_names.clear();
	switch(dim){
	case 1:
		solution_names.push_back("displacement");
		break;
	case 2:
		solution_names.push_back("x_displacement");
		solution_names.push_back("y_displacement");
		break;
	case 3:
		solution_names.push_back("x_displacement");
		solution_names.push_back("y_displacement");
		solution_names.push_back("z_displacement");
		break;
	default:
		Assert(false, ExcNotImplemented);
	}
	OutputData<dim> out_soln;
	out_soln.write_fe_solution(filename, *dof_handler,
			solution, solution_names);

	//Writing the density solution
	filename = "density-";
	filename += ss.str();
	filename += ".vtk";
	std::vector<std::string> density_names;
	density_names.clear();
	density_names.push_back("density");
	out_soln.write_fe_solution(filename, *analysis_density_handler,
			nodal_density, density_names);

	//std::cout<<"Output written"<<std::endl;

	//Writing the design output
	filename = "design-";
	filename += ss.str();
	filename += ".dat";

	if(mesh->adaptivityType == "movingdesignpoints"){
		out_soln.write_design(filename,
				*design_vector,
				mesh->design_var_per_point());
	}
	else{
		out_soln.write_design(filename,
				*dof_handler,
				*cell_info_vector);
	}

}
template <int dim>
void FEM<dim>::reset(){
	//initializing the current and running quad rules
	current_quad_rule = 4;
	running_quad_rule = 2;

	elastic_data.current_quad_rule = current_quad_rule;
	elastic_data.running_quad_rule = running_quad_rule;
	//current_quad_rule  will be updated on adaptivity in quadrature

	//Initializing the quadrature rule for all the elements
	QGauss<2> temp_quad(current_quad_rule);

	elastic_data.nu = linear_elastic->poisson;

	/**
	 * Initialize the cell parameters for all the FE cells
	 */
	for(std::vector<CellInfo>::iterator cell_info_itr = cell_info_vector->begin();
			cell_info_itr != cell_info_vector->end();
			++cell_info_itr){
		(*cell_info_itr).quad_rule = current_quad_rule;
		(*cell_info_itr).dim = dim;
		QGauss<dim> temp_quad(current_quad_rule);
		(*cell_info_itr).n_q_points = temp_quad.size();
		(*cell_info_itr).shape_function_order = 1.0;
		(*cell_info_itr).cell_area = 0.00001;
		(*cell_info_itr).density.resize((*cell_info_itr).n_q_points, 0.01);

		// Initialize the designField for uncoupled meshes
		if(mesh->coupling == false && mesh->adaptivityType == "adaptive_grayness"){
			(*cell_info_itr).design_points.no_points = mesh->initial_dcount_per_el;
			(*cell_info_itr).design_points.initialize_field(dim, mesh->initial_dcount_per_el, 1, volfrac);
		}
	}

	//Initialize the density cell parameters for all the density cells
	if (mesh->coupling == false && mesh->adaptivityType == "movingdesignpoints"){
		unsigned int design_len = (*design_vector).size();	//size of design vector
		unsigned int k = 0;	//for iterating over all the design variables

		//Iterating over the number of design points
		for(std::vector<CellInfo>::iterator design_point_info_itr = density_cell_info_vector->begin();
				design_point_info_itr != density_cell_info_vector->end();
				++design_point_info_itr){

			//Setting the density quad rule to 1
			(*design_point_info_itr).density.resize(1);
			(*design_point_info_itr).density[0] = (*design_vector)[k]; k++;	//added design densty and iterated k
			(*design_point_info_itr).projection_fact = (*design_vector)[k];	k++;	//added projection factor

			//Adding the position of the design point
			(*design_point_info_itr).pointX.resize(dim);
			for (unsigned int j = 0; j < dim; j++){
				(*design_point_info_itr).pointX[j] = (*design_vector)[k];	k++;
			}

			(*design_point_info_itr).dxPhys.resize(mesh->design_var_per_point(), 0.0);
		}
	}
	else{
		for(std::vector<CellInfo>::iterator density_cell_info_itr = density_cell_info_vector->begin();
				density_cell_info_itr != density_cell_info_vector->end();
				++density_cell_info_itr){

			//Setting the density quad rule to 1
			(*density_cell_info_itr).quad_rule = 1;
			(*density_cell_info_itr).n_q_points = 1; //	located at the centroid
			(*density_cell_info_itr).cell_area = 0.00001;	//area of the density cell
			(*density_cell_info_itr).density.resize((*density_cell_info_itr).n_q_points, volfrac);
			(*density_cell_info_itr).dxPhys.resize(mesh->design_var_per_point(), 0.0);
		}
	}




	/**
	 * Link the cell_info_vector to the FE triangulation
	 * user_index is 1, 2, 3.......
	 */
	typename hp::DoFHandler<dim>::active_cell_iterator cell = dof_handler->begin_active(),
			endc = dof_handler->end();
	unsigned int cell_itr = 0;
	for(; cell != endc; ++cell){
		cell->set_user_index(cell_itr + 1);
		(*cell_info_vector)[cell_itr].cell_area = cell->measure(); //defining cell area
		++cell_itr;
	}


	/**
	 * Link the density_cell_info_vector to the density triangulation
	 * user index is 1, 2, 3, ...
	 */
	typename hp::DoFHandler<dim>::active_cell_iterator density_cell = design_handler->begin_active(),
			density_endc = design_handler->end();
	unsigned int density_cell_itr = 0;
	for(; density_cell != density_endc; ++density_cell){
		density_cell->set_user_index(density_cell_itr + 1);
		(*density_cell_info_vector)[density_cell_itr].cell_area = density_cell->measure();
		++density_cell_itr;
	}

	// These parameters are currently defined assuming that the final density is also represented on the analysis mesh
	density_field.max_cell_area = (*cell_info_vector)[0].cell_area;
	density_field.initial_no_cells = triangulation->n_active_cells();
	density_field.volfrac = volfrac;

}

template <int dim>
void FEM<dim>::initialize_cycle(){

	/**
	 * Link the cell_info_vector to the FE triangulation
	 * user_index is 1, 2, 3.......
	 */

	std::cout<<"Initializing the cycle "<<std::endl;

	typename hp::DoFHandler<dim>::active_cell_iterator cell = dof_handler->begin_active(),
			endc = dof_handler->end();
	unsigned int cell_itr = 0;
	for(; cell != endc; ++cell){
		cell->set_user_index(cell_itr + 1);
		(*cell_info_vector)[cell_itr].cell_area = cell->measure(); //defining cell area
		++cell_itr;
	}

	/**
	 * Link the density_cell_info_vector to the density triangulation
	 * user index is 1, 2, 3, ...
	 */
	typename hp::DoFHandler<dim>::active_cell_iterator density_cell = design_handler->begin_active(),
			density_endc = design_handler->end();
	unsigned int density_cell_itr = 0;
	for(; density_cell != density_endc; ++density_cell){
		density_cell->set_user_index(density_cell_itr + 1);
		(*density_cell_info_vector)[density_cell_itr].cell_area = density_cell->measure();
		++density_cell_itr;
	}

	density_field.update_design_vector(*cell_info_vector,
			*density_cell_info_vector,
			*design_vector,
			cycle,
			volfrac,
			*mesh,
			*projection);
	double time1 = clock();

	std::cout<<"Looking for neighbours;   ";

	if (mesh->coupling == false && mesh->adaptivityType == "movingdesignpoints"){
		density_field.create_neighbors(
				*cell_info_vector,
				*density_cell_info_vector,
				*fe,
				*dof_handler);
	}
	else{
		density_field.create_neighbors(
				*cell_info_vector,
				*fe,
				*fe_design,
				*dof_handler,
				*design_handler,
				*projection,
				*mesh);
	}

	double time2 = clock();
	time2 = (time2 - time1)/(double)CLOCKS_PER_SEC;
	std::cout<<"Neighbours' indices stored : time taken = "<<time2<<" seconds"<<std::endl;

}

template <int dim>
void FEM<dim>::update_physics(){

	//update the B and d matrices for linear elastic problem
	if(linear_elastic){
		elastic_data.update_elastic_matrices(*fe, *dof_handler);
	}
}

template <int dim>
void FEM<dim>::assembly(){

	const unsigned int dofs_per_cell = fe->dofs_per_cell;
	const unsigned int density_per_fe_cell = fe_analysis_density->dofs_per_cell;

	FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
	FullMatrix<double> normalized_matrix(dofs_per_cell, dofs_per_cell);

	Vector<double> cell_rhs(dofs_per_cell);
	Vector<double> cell_density(density_per_fe_cell);

	std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);
	std::vector<types::global_dof_index> local_density_indices(density_per_fe_cell);

	//Iterators for the FE mesh
	typename hp::DoFHandler<dim>::active_cell_iterator cell = dof_handler->begin_active(),
			endc = dof_handler->end();
	unsigned int cell_itr = 0;

	//Iterator for density points on the FE mesh
	typename hp::DoFHandler<dim>::active_cell_iterator fe_den_cell = analysis_density_handler->begin_active(),
			fe_den_endc = analysis_density_handler->end();

	//Iterators for the density mesh
	typename hp::DoFHandler<dim>::active_cell_iterator density_cell = design_handler->begin_active(),
			density_endc = design_handler->end();

	for (; cell != endc; ++cell){

		cell_matrix = 0;
		cell_rhs = 0;
		cell_density = 0;
		QGauss<dim> quadrature_formula((*cell_info_vector)[cell_itr].quad_rule);
		FEValues<dim> fe_values(*fe,
				quadrature_formula,
				update_values |
				update_gradients |
				update_quadrature_points |
				update_JxW_values
				);

		FEValues<dim> fe_density_values(*fe_analysis_density,
				quadrature_formula,
				update_values |
				update_gradients |
				update_quadrature_points |
				update_JxW_values
				);

		fe_values.reinit(cell);
		fe_density_values.reinit(fe_den_cell);
		unsigned int n_q_points = quadrature_formula.size(); //No. of integration points

		//Add source function to the right hand side
		std::vector<Vector<double>> rhs_values(n_q_points,
				Vector<double>(dim));
		add_source_to_rhs(fe_values.get_quadrature_points(),
				rhs_values);


		//Calculating the cell_matrix
		double total_weight = 0.0; // For setting the density values at the nodes
		for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
			unsigned int quad_index = elastic_data.get_quad_index((*cell_info_vector)[cell_itr].quad_rule);
			normalized_matrix = elastic_data.elem_stiffness_array[quad_index][q_point];
			cell_matrix.add((*cell_info_vector)[cell_itr].E_values[q_point],
					normalized_matrix);

			total_weight += fe_density_values.JxW(q_point);
		}


		//Calculating cell_rhs
		for(unsigned int i = 0; i < dofs_per_cell; ++i){
			const unsigned int component_i = fe->system_to_component_index(i).first;
			for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
				cell_rhs(i) += fe_values.shape_value(i, q_point) *
						rhs_values[q_point](component_i) *
						fe_values.JxW(q_point);
			}
		}


		cell->get_dof_indices(local_dof_indices);
		//for(unsigned int i = 0; i < local_dof_indices.size(); ++i)
		for(unsigned int i = 0; i < dofs_per_cell; ++i){
			for(unsigned int j = 0; j < dofs_per_cell; ++j){
				system_matrix.add(local_dof_indices[i],
						local_dof_indices[j],
						cell_matrix(i, j));
			}
			system_rhs(local_dof_indices[i]) += cell_rhs(i);
		}

		fe_den_cell->get_dof_indices(local_density_indices);
		for(unsigned int i = 0; i < density_per_fe_cell; ++i){
			for(unsigned int q_point = 0 ; q_point < n_q_points; ++q_point){
				cell_density(i) += 	(*cell_info_vector)[cell_itr].density[q_point] *
						(fe_density_values.JxW(q_point)/total_weight);
			}
			nodal_density(local_density_indices[i]) += cell_density(i);
			cells_adjacent_per_node(local_density_indices[i]) += 1;
		}


		//Adding the density weights to the cell_info_vector
		(*cell_info_vector)[cell_itr].density_weights.clear();
		for(unsigned int qpoint = 0; qpoint < n_q_points; ++qpoint){
			(*cell_info_vector)[cell_itr].density_weights.push_back(fe_density_values.JxW(qpoint)/total_weight);
		}

		++fe_den_cell;
		++density_cell;
		++cell_itr;
	}


	//Normalizing the nodal density vector
	for(unsigned int i = 0; i < nodal_density.size(); ++i){
		unsigned int denom = cells_adjacent_per_node(i);
		if (denom <= 0){
			std::cerr<<"ERROR!! Wrong no. of cells adjacent to node found"<<std::endl;
		}
		else{
			nodal_density(i) /= denom;
		}
	}



	//Constraining the hanging nodes
	hanging_node_constraints.condense(system_matrix);
	hanging_node_constraints.condense(system_rhs);

	//Applying the boundary conditions
	std::map<types::global_dof_index, double> boundary_values;
	BoundaryValues<dim> boundary_v;
	VectorTools::interpolate_boundary_values(*dof_handler,
			42,
			boundary_v,
			boundary_values);
	MatrixTools::apply_boundary_values(boundary_values,
			system_matrix,
			solution,
			system_rhs);

	//Add point-source function to the right hand side
	add_point_source_to_rhs();

}

template <int dim>
void FEM<dim>::add_source_to_rhs(
		const std::vector<Point<dim> > &points,
		std::vector<Vector<double> > &value_list){
	Assert (value_list.size() == points.size(),
			ExcDimensionMismatch(value_list.size(), points.size()));
	const unsigned int n_points = points.size();

	for (unsigned int p = 0; p < n_points; ++p){
		std::vector<double> x;
		x.resize(dim);
		for(unsigned int i = 0; i < dim; ++i)
			x[i] = points[p](i);
		x = mesh->source_fn(x);

		Assert(x.size() == dim,
				ExcDimensionMismatch(x.size(), dim));
		for(unsigned int i = 0; i < dim; ++i){
			value_list[p](i) = x[i];
		}
	}
}

template <int dim>
void FEM<dim>::add_point_source_to_rhs(){
	unsigned int no_sources = (mesh->point_source_vector).size();
	for(unsigned int s = 0; s < no_sources; ++s){
		std::vector<double> load_point = mesh->point_source_vector[s].first;
		std::vector<double> load = mesh->point_source_vector[s].second;
		Assert (load_point.size() == dim,
				ExcDimensionMismatch(load_point.size(), dim));
		Assert (load.size() == dim,
				ExcDimensionMismatch(load.size(), dim));

		Point<dim> ldp, ld;
		for(unsigned int i = 0; i < dim; ++i){
			ldp(i) = load_point[i];
			ld(i) = load[i];
		}
		VectorTools::create_point_source_vector(*dof_handler, ldp, ld, system_rhs);
	}
}

//Function for setting boundary indicators for the domain
template <int dim>
void FEM<dim>::boundary_info(){
	for (typename Triangulation<dim>::active_cell_iterator
			cell = triangulation->begin();
			cell != triangulation->end();
			++cell ){
		for (unsigned int f = 0; f < GeometryInfo<dim>::faces_per_cell; ++f){
			Point<dim> point1 = cell->face(f)->center();
			std::vector<double> x(dim);
			for(unsigned int  i = 0; i < dim; ++i){
				x[i] = point1(i);
			}
			unsigned int indic = mesh->boundary_indicator(x);
			cell->face(f)->set_boundary_indicator(indic);

		}
	}
}

template <int dim>
void FEM<dim>::clean_trash(){
	system_matrix.clear();
	solution = 0;
	system_rhs = 0;
	nodal_density = 0;
	cells_adjacent_per_node = 0;

	if (mesh->coupling == true || mesh->adaptivityType == "movingdesignpoints"){
		unsigned int no_des_per_point = mesh->design_var_per_point();
		//cleaning contents of the storage vectors
		for(unsigned int i = 0 ; i < density_cell_info_vector->size(); ++i){
			(*density_cell_info_vector)[i].dxPhys.clear();
			(*density_cell_info_vector)[i].dxPhys.resize(no_des_per_point, 0.0);
		}

	}
	else{
		for (unsigned int i = 0; i < cell_info_vector->size(); ++i){
			for(unsigned int j = 0; j < (*cell_info_vector)[i].design_points.no_points; ++j){
				(*cell_info_vector)[i].design_points.dxPhys_drho[j] = 0.0;
			}
		}
	}
	std::cout<<"Trash cleaned "<<std::endl;

}


//This function is called at the end of each cycle to save the decoupled design
//This is an expensive function evaluation and will affect the performance
//Thus, it should only be used when the design is needed.











