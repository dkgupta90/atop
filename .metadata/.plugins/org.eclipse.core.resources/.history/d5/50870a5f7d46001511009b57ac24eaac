/*
 *
 *  Created on: Aug 19, 2015
 *      Author: Deepak K. Gupta
 *  
 */

#include <atop/optimizer/optimality_criteria.h>
#include <atop/TopologyOptimization/optimizedesign.h>
#include <math.h>

using namespace atop;

OC::OC(unsigned int n){
	no_design = n;
}

void OC::set_lower_bounds(
		std::vector<double> &vec1){
	this->lb = &vec1;
}

void OC::set_upper_bounds(
		std::vector<double> &vec1){
	this->ub = &vec1;
}

void OC::optimize(
		std::vector<double> &vec1){
	this->design_vector = &vec1;

	double old_objective = 9999999999, objective;
	Optimizedesign<2> *opt_design2d = static_cast<Optimizedesign<2>*>(obj_data);

	do{
		std::cout<<"OC method initiated"<<std::endl;
		std::vector<double> obj_grad(no_design);
		std::vector<double> *old_design_vector = design_vector;
		obj_grad.clear();

		//Calculating the objective and derivative
		objective = obj_fn(
				*design_vector,
				obj_grad,
				obj_data);
		for(unsigned int i = 0; i < obj_grad.size(); ++i)
			std::cout<<(opt_design2d->grad_vector)[i]<<std::endl;

		double current_volfrac = 0.0;
		double l1 = 1e-5, l2 = 100000, move = 0.2;
		while ((l2 - l1) > 1e-4){
			double lmid = 0.5*(l1  + l2);
			for (unsigned int i = 0; i < design_vector->size(); ++i){
				double octemp1;
				double old_density = (*old_design_vector)[i];
				//std::cout<<"Old density : "<<old_density<<std::endl;
				if (obj_grad[i] > 0){
					std::cout<<"Error located "<<obj_grad[i]<<std::endl;
				}
				//std::cout<<dobj_ddn[i]<<std::endl;
				octemp1 = old_density * (sqrt(-obj_grad[i]/lmid));
				//std::cout<<"octemp1: "<<octemp1<<std::endl;
				if ((old_density + move) < octemp1){
					octemp1 = old_density + move;
				}
				if (octemp1 > (*ub)[i]){
					octemp1 = (*ub)[i];
				}
				if ((old_density - move) > octemp1){
					octemp1 = old_density - move;
				}
				if (octemp1 < (*lb)[i]){
					octemp1 = (*lb)[i];
				}

				(*design_vector)[i] = octemp1;
			}

			//updating the density_cell_info_vector
			opt_design2d->obj_fem->density_field.update_density_cell_info_vector(
					opt_design2d->density_cell_info_vector,
					*design_vector);

			//Applying smoothing
			opt_design2d->obj_fem->density_field.smoothing(
					opt_design2d->cell_info_vector,
					opt_design2d->density_cell_info_vector);

			//Computing current volume fraction
			current_volfrac = opt_design2d->obj_fem->density_field.get_vol_fraction(
					opt_design2d->density_cell_info_vector);

			//std::cout<<(density_sum/(x_count*y_count))<<std::endl;
			if((current_volfrac - opt_design2d->volfrac) > 0){
				l1 = lmid;
			}
			else{
				l2 = lmid;
			}
		}
		//std::cout<<density_sum<<std::endl;
		std::cout<<"Volfrac: "<<current_volfrac<<std::endl;
	}while(fabs(old_objective - objective) > min_obj_change);
}
