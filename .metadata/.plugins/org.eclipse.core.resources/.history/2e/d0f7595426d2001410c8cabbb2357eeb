/*
 * step1.cpp
 *
 *  Created on: Jun 20, 2014 at Precision & Microsystems Engineering group, TU Delft
 *      Author: Deepak K. Gupta
 */


#include <deal.II/base/quadrature_lib.h>
#include <deal.II/base/function.h>
#include <deal.II/base/logstream.h>
#include <deal.II/lac/vector.h>
#include <deal.II/lac/full_matrix.h>
#include <deal.II/lac/sparse_matrix.h>
#include <deal.II/lac/solver_cg.h>
#include <deal.II/lac/precondition.h>
#include <deal.II/grid/tria.h>
#include <deal.II/grid/grid_generator.h>
#include <deal.II/grid/grid_refinement.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/grid/tria_iterator.h>
#include <deal.II/grid/tria_boundary_lib.h>
#include <deal.II/grid/grid_tools.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_accessor.h>
#include <deal.II/dofs/dof_tools.h>
#include <deal.II/fe/fe_values.h>
#include <deal.II/numerics/vector_tools.h>
#include <deal.II/numerics/matrix_tools.h>
#include <deal.II/numerics/data_out.h>
#include <deal.II/numerics/error_estimator.h>
#include <deal.II/fe/fe_system.h>
#include <deal.II/fe/fe_q.h>
#include <deal.II/fe/fe_dgq.h>
#include <fstream>
#include <iostream>
#include <sstream>
#include <atop/TopologyOptimization/DensityValues.h>
#include <atop/TopologyOptimization/penalization.h>
#include <atop/physics/elasticity.h>
#include <atop/data_format/bitmap/bitmap_image.hpp>
#include <atop/data_format/bitmap.h>
#include <atop/math_tools/algebra/MatrixVector.h>
#include <atop/TopologyOptimization/design_analysis.h>
#include<deal.II/grid/grid_refinement.h>
#include<deal.II/numerics/error_estimator.h>
#include <deal.II/numerics/data_out_dof_data.h>
#include <atop/TopologyOptimization/RefinementIndicator.h>
#include <time.h>
#include <math.h>
#include <atop/TopologyOptimization/cell_prop.h>
//#include <nlopt.hpp>
#include <iostream>
#include <fstream>
#include <stddef.h>

namespace Step1 {
	using namespace dealii;
	using namespace topopt;
	template <int dim>

	class TopOptimization {
	public:
		double xmin, xmax, ymin, ymax;	//Limits for the rectangular domain
		unsigned int x_count, y_count;	//analysis mesh size
		unsigned int design_x_count, design_y_count;	//design mesh size
		double E0, Emin, nu;	//Elasticity parameters
		double penal_power;		//SIMP penal power
		unsigned int penalization_model;
		std::vector<double> density_mesh;
		std::vector<double> old_density_mesh;
		std::ofstream myfile;

		std::vector<double> x;
		unsigned int model_problem;
		unsigned int max_quadrature_rule;
		unsigned int running_quad_rule, current_quad_rule;

		TopOptimization();
		~TopOptimization();

		void run();

	private:
		void fem_solver(int itr);
		void setup_system();
		void assemble_system();
		void boundary_info();
		void solve();

		void get_Bmatrix(FullMatrix<double>);
		void get_Dmatrix(FullMatrix<double>);


		typedef struct{
			double a;
			unsigned int elem_count;
		}my_constraint_data;

		void output_results(const unsigned int cycle) const;
		Triangulation<dim> triangulation;	//Defines dim dimensional triangulation object
		Triangulation<dim> density_triangulation; //For visualization of denity distribution
		DoFHandler<dim> dof_handler;
		FESystem<dim> fe;
		DoFHandler<dim> density_dof_handler;
		FESystem<dim> density_fe;
		ConstraintMatrix hanging_node_constraints;
		ConstraintMatrix density_hanging_node_constraints;
		SparsityPattern sparsity_pattern;
		SparseMatrix<double> system_matrix;
		Vector<double> solution;
		Vector<double> system_rhs;
		Vector<double> nodal_density;
		std::vector<FullMatrix<double>> elem_stiffness_array;
		DensityValues rho_values;
		StoreElasticData elastic_data;
	};


	template <int dim>
	class RightHandSide: public Function<dim>{
	public:
		RightHandSide();
		virtual void vector_value(const Point<dim> &p,
				Vector<double> &values) const;
		virtual void vector_value_list(const std::vector<Point<dim>> &points,
				std::vector<Vector<double>> &value_list) const;
	};

	template <int dim>
	class BoundaryValues : public Function<dim>{
	public:
		BoundaryValues(): Function<dim>() {}
		virtual void vector_value(const Point<dim> &p,
				Vector<double> &values) const;
		virtual void vector_value_list (const std::vector<Point<dim>> & points,
				std::vector<Vector<double>> &value_list) const;
	};

	template <int dim>
	RightHandSide<dim>::RightHandSide() : Function<dim>(dim){}; //constructor for the base class

	template <int dim>
	inline
	void RightHandSide<dim>::vector_value(const Point<dim> &p,
			Vector<double> &values) const{
		Assert (values.size() == dim,
				ExcDimensionMismatch(values.size(), dim));
		Assert(dim >= 2,
				ExcNotImplemented());
	}

	template <int dim>
	void RightHandSide<dim>::vector_value_list(const std::vector<Point<dim>> &points,
			std::vector<Vector<double>> &value_list) const {
		Assert (value_list.size() == points.size(),
				ExcDimensionMismatch(value_list.size(), points.size()));
		const unsigned int n_points = points.size();

		for (unsigned int p = 0; p < n_points; ++p){
			RightHandSide<dim>::vector_value(points[p],
					value_list[p]);
		}
	}

	template <int dim>
	inline
	void BoundaryValues<dim>::vector_value(const Point<dim> &p,
			Vector<double> &values) const{
		Assert (values.size() == dim,
				ExcDimensionMismatch(values.size(), dim));
		Assert(dim >= 2,
				ExcNotImplemented());
		unsigned int model_problem = 2;
		double xmin, xmax, ymin, ymax;
		if (model_problem == 1){
			//MBB problem
			xmin = 0, ymin = 0, xmax = 2, ymax = 1;
			if (std::fabs(p(0) - (xmin)) < 1e-12){
				values(0) = 0;
				values(1) = 0;
			}
		}
		else if (model_problem == 2) {
			//Mitchel stress problem
			xmin = 0, ymin = 0, xmax = 1.5, ymax = 1;
			double rball = 0.02;
			Point<dim> center;
			center(0) = xmin + rball;
			center(1) = (ymax+ymin)/2;
			if (center.distance(p) <= rball){
				values(0) = 0;
				values(1) = 0;
			}
		}


	}

	template <int dim>
	void BoundaryValues<dim>::vector_value_list(const std::vector<Point<dim>> &points,
			std::vector<Vector<double>> &value_list) const {
		Assert (value_list.size() == points.size(),
				ExcDimensionMismatch(value_list.size(), points.size()));
		const unsigned int n_points = points.size();

		for (unsigned int p = 0; p < n_points; ++p){
			BoundaryValues<dim>::vector_value(points[p],
					value_list[p]);
		}
	}


	template <int dim>
	TopOptimization<dim>::TopOptimization():
		dof_handler(triangulation),
		fe(FE_Q<dim>(1), dim),
		density_dof_handler(density_triangulation),
		density_fe(FE_DGQ<dim>(1), 1)
		{}

	template <int dim>
	TopOptimization<dim>::~TopOptimization(){
		dof_handler.clear();
		density_dof_handler.clear();
	}

	template <int dim>
	void TopOptimization<dim>::setup_system(){
		//std::cout<<"Entered setup_system()"<<std::endl;
		//Density mesh
		density_dof_handler.distribute_dofs(density_fe);
/*		density_hanging_node_constraints.clear();
		DoFTools::make_hanging_node_constraints(density_dof_handler,
				density_hanging_node_constraints);
		density_hanging_node_constraints.close();*/
		//FE mesh
		dof_handler.distribute_dofs(fe);
		hanging_node_constraints.clear();
		DoFTools::make_hanging_node_constraints(dof_handler,
						hanging_node_constraints);
		hanging_node_constraints.close();

		sparsity_pattern.reinit(dof_handler.n_dofs(),
				dof_handler.n_dofs(),
				dof_handler.max_couplings_between_dofs());

		DoFTools::make_sparsity_pattern(dof_handler, sparsity_pattern);

		hanging_node_constraints.condense(sparsity_pattern);
		sparsity_pattern.compress();
		system_matrix.reinit(sparsity_pattern);

		solution.reinit(dof_handler.n_dofs());
		system_rhs.reinit(dof_handler.n_dofs());

		nodal_density.reinit(density_dof_handler.n_dofs());
	}

	template <int dim>
	void TopOptimization<dim>::assemble_system(){
		std::cout<<"Entered assemble_system()"<<std::endl;

		//Declaring the required local variables
		const unsigned int dofs_per_cell = fe.dofs_per_cell;
		const unsigned int density_per_cell = density_fe.dofs_per_cell;
		FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
		FullMatrix<double> Bmatrix(3, dofs_per_cell);
		FullMatrix<double> Dmatrix(3, 3);
		FullMatrix<double> normalized_matrix(dofs_per_cell, dofs_per_cell);
		Vector<double> cell_rhs(dofs_per_cell);
		Vector<double> cell_density(density_per_cell);
		std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);
		std::vector<types::global_dof_index> local_density_indices(density_per_cell);
		elastic_data.nu = nu;
		//elastic_data.fe = fe;
		density_mesh.clear();

		//define the numerical integration scheme
		QGauss<dim> quadrature_formula(2);
		FEValues<dim> fe_values(fe,
				quadrature_formula,
				update_values |
				update_gradients |
				update_quadrature_points |
				update_JxW_values
				);


		//updating the user indices to connect cell with cell_itr
		typename DoFHandler<dim>::active_cell_iterator cell = dof_handler.begin_active(),
				endc = dof_handler.end();

		RightHandSide<dim> right_hand_side;

		unsigned cell_itr = 0;
		for (; cell != endc; ++cell){
			cell_matrix = 0;
			cell_rhs = 0;

			FEValues<dim> density_fe_values(density_fe,
					quadrature_formula,
					update_values |
					update_gradients |
					update_quadrature_points |
					update_JxW_values
					);
			fe_values.reinit(cell);
			unsigned int n_q_points = quadrature_formula.size();
			//std::cout<<"Reached here  "<<cell_itr<<std::endl;
			std::vector<Vector<double>> rhs_values(n_q_points,
					Vector<double>(dim));
			right_hand_side.vector_value_list(fe_values.get_quadrature_points(),
					rhs_values);

			std::vector<Point<dim> > qpoints = fe_values.get_quadrature_points();

			for(unsigned int i = 0; i < dofs_per_cell; ++i){
				const unsigned int component_i = fe.system_to_component_index(i).first;
				for(unsigned int q_point = 0; q_point < n_q_points; ++q_point){
					cell_rhs(i) += fe_values.shape_value(i, q_point) *
							rhs_values[q_point](component_i) *
							fe_values.JxW(q_point);
				}
			}
			cell->get_dof_indices(local_dof_indices);

			for(unsigned int i = 0; i < dofs_per_cell; ++i){
				for(unsigned int j = 0; j < dofs_per_cell; ++j){
					system_matrix.add(local_dof_indices[i],
							local_dof_indices[j],
							cell_matrix(i, j));
				}
				system_rhs(local_dof_indices[i]) += cell_rhs(i);
			}
			++cell_itr;
		}
		hanging_node_constraints.condense(system_matrix);
		hanging_node_constraints.condense(system_rhs);

		std::map<types::global_dof_index, double> boundary_values;
		VectorTools::interpolate_boundary_values(dof_handler,
				42,
				BoundaryValues<dim>(),
				boundary_values);
		MatrixTools::apply_boundary_values(boundary_values,
				system_matrix,
				solution,
				system_rhs);

		//Define a point force
		const Point<dim> load_point(xmax, (ymax+ymin)/2);
		const Point<dim> load(0, -1);
		VectorTools::create_point_source_vector(dof_handler, load_point, load, system_rhs);

	}

	template <int dim>
	void TopOptimization<dim>::boundary_info(){
		//This function defines the fixed degrees of freedom
		for (typename Triangulation<dim>::active_cell_iterator
				cell = triangulation.begin();
				cell != triangulation.end();
				++cell ){
			for (unsigned int f = 0; f < GeometryInfo<dim>::faces_per_cell; ++f){
				//std::cout<<cell->face(f)->center()(0)<<std::endl;
				if(model_problem == 1){
					if (std::fabs(cell->face(f)->center()(0) - (xmin)) < 1e-12){
						cell->face(f)->set_boundary_indicator(42);
					}
				}
				else if (model_problem == 2) {
					double rball = 0.02;
					Point<dim> center_point;
					center_point(0) = xmin + rball;
					center_point(1) = (ymax+ymin)/2;
					Point<dim> temp_point = cell->face(f)->center();
					if (temp_point.distance(center_point) < rball){
						cell->face(f)->set_boundary_indicator(42);
					}
				}
			}
		}
	}

	template <int dim>
	void TopOptimization<dim>::solve(){

		SolverControl solver_control(5000, 1e-11);
		SolverCG<> cg(solver_control);

		PreconditionSSOR<> preconditioner;
		preconditioner.initialize(system_matrix, 1.2);
		cg.solve(system_matrix,
				solution,
				system_rhs,
				preconditioner);

		hanging_node_constraints.distribute(solution);
		//solution.
	}


	template <int dim>
	void TopOptimization<dim>::output_results(unsigned int iter) const{
		std::string filename = "solution-";
		std::string density_filename = "density-";
		std::stringstream ss;
		filename += ss.str();
		density_filename += ss.str();
		//Assert(cycle < 10, ExcInternalError());
		filename += ".vtk";
		density_filename += ".vtk";

		std::ofstream output(filename.c_str());
		DataOut<dim> data_out;
		data_out.attach_dof_handler(dof_handler);

		std::vector<std::string> solution_names;
		switch(dim){
		case 1:
			solution_names.push_back("displacement");
			break;
		case 2:
			solution_names.push_back("x_displacement");
			solution_names.push_back("y_displacement");
			break;
		case 3:
			solution_names.push_back("x_displacement");
			solution_names.push_back("y_displacement");
			solution_names.push_back("z_displacement");
			break;
		default:
			Assert(false, ExcNotImplemented);
		}

		data_out.add_data_vector(solution, solution_names);
		data_out.build_patches();
		data_out.write_vtk(output);

		//For density output
		std::ofstream density_output(density_filename.c_str());
		DataOut<dim> density_data_out;
		density_data_out.attach_dof_handler(density_dof_handler);

		std::vector<std::string> density_solution_name;
		density_solution_name.push_back("Density");
		double max_nodal = 0.0;
		double max_denmesh = 0.0;
		for(unsigned int i = 0; i < nodal_density.size(); ++i){
			//std::cout<<nodal_density.size()<<std::endl;
			if(nodal_density(i) > max_nodal){
				max_nodal = nodal_density(i);
			}
		}

		for(unsigned int i = 0; i < density_mesh.size(); ++i){
			if(density_mesh[i] > max_denmesh){
				max_denmesh = density_mesh[i];
			}
		}

		//Data
		std::cout<<"Nodal density : "<<max_nodal <<"  "<<max_denmesh<<std::endl;
		density_data_out.add_data_vector(nodal_density, density_solution_name);
				//DataOut<dim, DoFHandler<dim, 2> >::type_cell_data);

		density_data_out.build_patches();
		density_data_out.write_vtk(density_output);
	}

	template<int dim>
	void TopOptimization<dim>::fem_solver(
			int itr){
			//physical size of the design domain
			if(model_problem == 1){
				xmin = 0;
				ymin = 0;
				xmax = 2;
				ymax = 1;
			}
			else if (model_problem == 2) {
				xmin = 0;
				ymin = 0;
				xmax = 1.5;
				ymax = 1;
			}
			const Point<2> point1(xmin, ymin);
			const Point<2> point2(xmax, ymax);
			std::vector<unsigned int> repetitions; // It defines the number of subdivisions in each direction
			repetitions.push_back(x_count);
			repetitions.push_back(y_count);
			GridGenerator::subdivided_hyper_rectangle(triangulation,
					repetitions,
					point1,
					point2,
					false
					);
			GridGenerator::subdivided_hyper_rectangle(density_triangulation,
					repetitions,
					point1,
					point2,
					false
					);
			std::cout<<"Active cells: "
					<<triangulation.n_active_cells();
			boundary_info();
			//setup_system();
;

		std::ofstream myfile1;
			std::string output_fname = "output.txt";
			myfile1.open(output_fname.c_str(), std::ofstream::app);
			myfile1<<"FE mesh: "<<triangulation.n_active_cells()<<"\n";
			//myfile1<<"Design mesh: "<<design_x_count*design_y_count<<"\n";
			myfile1.close();
		boundary_info();
		setup_system();
		std::cout<<"No. of degrees of freedom  : "
				<<dof_handler.n_dofs()
				<<std::endl;
		std::cout<<"Iteration: "<<itr + 1<<std::endl;
		assemble_system();
		solve();
	}



	template <int dim>
	void TopOptimization<dim>::run(){
		double min_change = 1e-3;
		std::string output_fname = "output.txt";
		std::ofstream myfile1;
		myfile1.open(output_fname.c_str(), std::ofstream::out);
		myfile1<<"FE mesh: "<<x_count<<" "<<y_count<<"\n";
		myfile1<<"Design mesh: "<<design_x_count<<" "<<design_y_count<<"\n";
		myfile1<<"Gamma: "<<gamma<<"\n";
		myfile1.close();

		fem_solver(0); //Solves the finite element mesh
		output_results(0);
		system_matrix.clear();
	}
}

int main()
{
	try{
		using namespace Step1;
		deallog.depth_console(0);

		Step1::TopOptimization<2> topopt2d;
		//Lines below initialize the parameters for the SIMP model
		topopt2d.E0 = 1.0;
		topopt2d.Emin = 1e-9;
		topopt2d.nu = 0.3;
		topopt2d.penalization_model = 1; //SIMP model
		topopt2d.model_problem = 1;
		topopt2d.penal_power = 3.0;
		topopt2d.current_quad_rule = 2;
		topopt2d.running_quad_rule = 2;
		if(topopt2d.model_problem == 1){
			//This model refers to a MBB
			topopt2d.x_count = 40;
			topopt2d.y_count = 20;
			topopt2d.design_x_count = 320; // mesh size for the design mesh
			topopt2d.design_y_count = 160; //mesh size for the design mesh
		}

		topopt2d.run();
		std::cout<<"Success"<<std::endl;
	}
	catch(std::exception &exc){
		std::cerr<<std::endl<<std::endl
				<<"------------------------------------------------------"
				<<std::endl;
		std::cerr<<"Exception on processing "<<std::endl
				<<exc.what()<<std::endl
				<<"Aborting! "<<std::endl
				<<"------------------------------------------------------"
				<<std::endl;
		return 1;

	}
	catch(...){
		std::cerr<<std::endl<<std::endl
				<<"------------------------------------------------------"
				<<std::endl;
		std::cerr<<"EUnknown Exception "<<std::endl
				<<"Aborting! "<<std::endl
				<<"------------------------------------------------------"
				<<std::endl;
		return 1;

	}
}
