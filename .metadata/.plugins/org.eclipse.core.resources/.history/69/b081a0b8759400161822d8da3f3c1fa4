/*
 *
 *  Created on: Apr 19, 2016
 *      Author: Deepak K. Gupta
 *  
 */

#include <atop/fem/define_mesh.h>
#include <atop/physics/mechanics/elastic.h>
#include <atop/TopologyOptimization/penalization.h>
#include <atop/TopologyOptimization/projection.h>
#include <atop/TopologyOptimization/optimizedesign.h>
#include <atop/fem/fem.h>
#include <string>
#include <vector>
#include <math.h>
#include <ctime>

using namespace atop;

std::vector<double> source_function(std::vector<double> X){
	//This function returns the value of the source function in the whole domain
	std::vector<double> output_source = {0.0, 0.0};
	return output_source;
}

unsigned int get_boundary_indicator(std::vector<double> X){
	//This function defines the boundary indicators

	if (fabs(X[0] - 0) < 1e-12)
		return 42;
	else
		return 9999;

}

int main(){
	using namespace atop;
	deallog.depth_console (2);
	unsigned int n = 1;
	//Define the mesh
	DefineMesh<2> mesh(2);
	mesh.coordinates = {{0, 2}, {0, 1}};
	mesh.subdivisions = {80*n, 40*n};
	mesh.coupling = false;
	mesh.source_fn = source_function;
	mesh.boundary_indicator = get_boundary_indicator;
	mesh.meshType = "subdivided_hyper_rectangle";
	mesh.elementType = "FE_Q";
	mesh.density_elementType = "FE_DGQ";
	mesh.initial_el_order = 1;
	mesh.initial_density_el_order = 1;
	mesh.max_el_order = 7;
	mesh.max_density_el_order = 1;
	mesh.adaptivityType = "adaptive_grayness";
	mesh.amrType = "dp-refinement";
	mesh.initial_dcount_per_el = 4;
	unsigned int nline = (int)(sqrt(mesh.initial_dcount_per_el));
	unsigned int density_res = 5;
	mesh.density_subdivisions = {80*n*density_res, 40*n*density_res};
	//Define point force
	std::vector<double> point = {2.0, 0.5};
	std::vector<double> source = {0, 1.0};
	mesh.point_source_vector.push_back(std::make_pair(point, source)); //make pairs and push

	//Define the FE related parameters

	//Define the physics of the problem
	LinearElastic<2> material1;
	material1.E = 1.0;
	material1.poisson = 0.3;
	material1.planarType = "planar_stress";

	//Define the penalization scheme
	Penalize penal("SIMP");
	penal.factmin = 1e-9;
	penal.penal_power = 3.0;

/*	//Define the projection scheme
	Projection filter("density_filter",
			0.06/n, 0.6);*/

/*
	//Define the projection scheme
	Projection filter("density_filter",
			"dp-refinement", 5);	//filter radius here is times the distance between any two design points in cell
*/

	Projection filter("density_filter",
			"dp-refinement", 0.03, 1.4);

	//Define the optimization parameters
	Optimizedesign<2> opt(mesh, penal, filter, "OC", 5);
	opt.problem_name = "minimum_compliance";
	opt.problemType(material1);
	opt.volfrac = 0.45; //Maximum permissible volume fraction

	clock_t begin = clock();
	opt.start_time = double (begin)/CLOCKS_PER_SEC;
	opt.optimize();
	clock_t end = clock();
	double elapsed_secs = double (end - begin)/CLOCKS_PER_SEC;
	std::cout<<"SUCCESS......Computing time : "<<elapsed_secs<<std::endl;
}
